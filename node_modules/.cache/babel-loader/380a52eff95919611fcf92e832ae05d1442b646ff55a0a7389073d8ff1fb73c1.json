{"ast":null,"code":"/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport './_version.js';\n// * * * IMPORTANT! * * *\n// ------------------------------------------------------------------------- //\n// jdsoc type definitions cannot be declared above TypeScript definitions or\n// they'll be stripped from the built `.js` files, and they'll only be in the\n// `d.ts` files, which aren't read by the jsdoc generator. As a result we\n// have to put declare them below.\n/**\r\n * @typedef {Object} InstallResult\r\n * @property {Array<string>} updatedURLs List of URLs that were updated during\r\n * installation.\r\n * @property {Array<string>} notUpdatedURLs List of URLs that were already up to\r\n * date.\r\n *\r\n * @memberof workbox-precaching\r\n */\n/**\r\n * @typedef {Object} CleanupResult\r\n * @property {Array<string>} deletedCacheRequests List of URLs that were deleted\r\n * while cleaning up the cache.\r\n *\r\n * @memberof workbox-precaching\r\n */\n/**\r\n * @typedef {Object} PrecacheEntry\r\n * @property {string} url URL to precache.\r\n * @property {string} [revision] Revision information for the URL.\r\n * @property {string} [integrity] Integrity metadata that will be used when\r\n * making the network request for the URL.\r\n *\r\n * @memberof workbox-precaching\r\n */\n/**\r\n * The \"urlManipulation\" callback can be used to determine if there are any\r\n * additional permutations of a URL that should be used to check against\r\n * the available precached files.\r\n *\r\n * For example, Workbox supports checking for '/index.html' when the URL\r\n * '/' is provided. This callback allows additional, custom checks.\r\n *\r\n * @callback ~urlManipulation\r\n * @param {Object} context\r\n * @param {URL} context.url The request's URL.\r\n * @return {Array<URL>} To add additional urls to test, return an Array of\r\n * URLs. Please note that these **should not be strings**, but URL objects.\r\n *\r\n * @memberof workbox-precaching\r\n */","map":{"version":3,"names":[],"sources":["D:/github/music-pwa-frontend/node_modules/workbox-precaching/_types.js"],"sourcesContent":["/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport './_version.js';\r\n// * * * IMPORTANT! * * *\r\n// ------------------------------------------------------------------------- //\r\n// jdsoc type definitions cannot be declared above TypeScript definitions or\r\n// they'll be stripped from the built `.js` files, and they'll only be in the\r\n// `d.ts` files, which aren't read by the jsdoc generator. As a result we\r\n// have to put declare them below.\r\n/**\r\n * @typedef {Object} InstallResult\r\n * @property {Array<string>} updatedURLs List of URLs that were updated during\r\n * installation.\r\n * @property {Array<string>} notUpdatedURLs List of URLs that were already up to\r\n * date.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\n/**\r\n * @typedef {Object} CleanupResult\r\n * @property {Array<string>} deletedCacheRequests List of URLs that were deleted\r\n * while cleaning up the cache.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\n/**\r\n * @typedef {Object} PrecacheEntry\r\n * @property {string} url URL to precache.\r\n * @property {string} [revision] Revision information for the URL.\r\n * @property {string} [integrity] Integrity metadata that will be used when\r\n * making the network request for the URL.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\n/**\r\n * The \"urlManipulation\" callback can be used to determine if there are any\r\n * additional permutations of a URL that should be used to check against\r\n * the available precached files.\r\n *\r\n * For example, Workbox supports checking for '/index.html' when the URL\r\n * '/' is provided. This callback allows additional, custom checks.\r\n *\r\n * @callback ~urlManipulation\r\n * @param {Object} context\r\n * @param {URL} context.url The request's URL.\r\n * @return {Array<URL>} To add additional urls to test, return an Array of\r\n * URLs. Please note that these **should not be strings**, but URL objects.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}