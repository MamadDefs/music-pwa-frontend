{"ast":null,"code":"/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport '../_version.js';\nvar getFriendlyURL = function getFriendlyURL(url) {\n  var urlObj = new URL(String(url), location.href);\n  // See https://github.com/GoogleChrome/workbox/issues/2323\n  // We want to include everything, except for the origin if it's same-origin.\n  return urlObj.href.replace(new RegExp(\"^\".concat(location.origin)), '');\n};\nexport { getFriendlyURL };","map":{"version":3,"names":["getFriendlyURL","url","urlObj","URL","String","location","href","replace","RegExp","origin"],"sources":["D:/github/music-pwa-frontend/node_modules/workbox-core/_private/getFriendlyURL.js"],"sourcesContent":["/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\nconst getFriendlyURL = (url) => {\r\n    const urlObj = new URL(String(url), location.href);\r\n    // See https://github.com/GoogleChrome/workbox/issues/2323\r\n    // We want to include everything, except for the origin if it's same-origin.\r\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\r\n};\r\nexport { getFriendlyURL };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAgB;AACvB,IAAMA,cAAc,GAAG,SAAjBA,cAAc,CAAIC,GAAG,EAAK;EAC5B,IAAMC,MAAM,GAAG,IAAIC,GAAG,CAACC,MAAM,CAACH,GAAG,CAAC,EAAEI,QAAQ,CAACC,IAAI,CAAC;EAClD;EACA;EACA,OAAOJ,MAAM,CAACI,IAAI,CAACC,OAAO,CAAC,IAAIC,MAAM,YAAKH,QAAQ,CAACI,MAAM,EAAG,EAAE,EAAE,CAAC;AACrE,CAAC;AACD,SAAST,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}