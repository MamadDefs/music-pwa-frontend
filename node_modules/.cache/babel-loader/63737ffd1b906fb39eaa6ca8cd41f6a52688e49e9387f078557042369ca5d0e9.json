{"ast":null,"code":"/* eslint-disable no-restricted-globals */ // This service worker can be customized!\n// See https://developers.google.com/web/tools/workbox/modules\n// for the list of available Workbox modules, or add any other\n// code you'd like.\n// You can also remove this file if you'd prefer not to use a\n// service worker, and the Workbox build step will be skipped.\nimport{clientsClaim}from'workbox-core';import{ExpirationPlugin}from'workbox-expiration';import{precacheAndRoute,createHandlerBoundToURL}from'workbox-precaching';import{registerRoute}from'workbox-routing';import{StaleWhileRevalidate}from'workbox-strategies';clientsClaim();// Precache all of the assets generated by your build process.\n// Their URLs are injected into the manifest variable below.\n// This variable must be present somewhere in your service worker file,\n// even if you decide not to use precaching. See https://cra.link/PWA\nprecacheAndRoute(self.__WB_MANIFEST);// Set up App Shell-style routing, so that all navigation requests\n// are fulfilled with your index.html shell. Learn more at\n// https://developers.google.com/web/fundamentals/architecture/app-shell\nvar fileExtensionRegexp=new RegExp('/[^/?]+\\\\.[^/]+$');registerRoute(// Return false to exempt requests from being fulfilled by index.html.\nfunction(_ref){var request=_ref.request,url=_ref.url;// If this isn't a navigation, skip.\nif(request.mode!=='navigate'){return false;}// If this is a URL that starts with /_, skip.\nif(url.pathname.startsWith('/_')){return false;}// If this looks like a URL for a resource, because it contains // a file extension, skip.\nif(url.pathname.match(fileExtensionRegexp)){return false;}// Return true to signal that we want to use the handler.\nreturn true;},createHandlerBoundToURL(process.env.PUBLIC_URL+'/index.html'));// An example runtime caching route for requests that aren't handled by the\n// precache, in this case same-origin .png requests like those from in public/\nregisterRoute(// Add in any other file extensions or routing criteria as needed.\nfunction(_ref2){var url=_ref2.url;return url.origin===self.location.origin&&url.pathname.endsWith('.png');},// Customize this strategy as needed, e.g., by changing to CacheFirst.\nnew StaleWhileRevalidate({cacheName:'images',plugins:[// Ensure that once this runtime cache reaches a maximum size the\n// least-recently used images are removed.\nnew ExpirationPlugin({maxEntries:50})]}));// This allows the web app to trigger skipWaiting via\n// registration.waiting.postMessage({type: 'SKIP_WAITING'})\nself.addEventListener('message',function(event){if(event.data&&event.data.type==='SKIP_WAITING'){self.skipWaiting();}});// Any other custom service worker logic can go here.","map":{"version":3,"names":["clientsClaim","ExpirationPlugin","precacheAndRoute","createHandlerBoundToURL","registerRoute","StaleWhileRevalidate","self","__WB_MANIFEST","fileExtensionRegexp","RegExp","request","url","mode","pathname","startsWith","match","process","env","PUBLIC_URL","origin","location","endsWith","cacheName","plugins","maxEntries","addEventListener","event","data","type","skipWaiting"],"sources":["D:/github/music-pwa-frontend/src/service-worker.js"],"sourcesContent":["/* eslint-disable no-restricted-globals */\r\n\r\n// This service worker can be customized!\r\n// See https://developers.google.com/web/tools/workbox/modules\r\n// for the list of available Workbox modules, or add any other\r\n// code you'd like.\r\n// You can also remove this file if you'd prefer not to use a\r\n// service worker, and the Workbox build step will be skipped.\r\n\r\nimport { clientsClaim } from 'workbox-core';\r\nimport { ExpirationPlugin } from 'workbox-expiration';\r\nimport { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';\r\nimport { registerRoute } from 'workbox-routing';\r\nimport { StaleWhileRevalidate } from 'workbox-strategies';\r\n\r\nclientsClaim();\r\n\r\n// Precache all of the assets generated by your build process.\r\n// Their URLs are injected into the manifest variable below.\r\n// This variable must be present somewhere in your service worker file,\r\n// even if you decide not to use precaching. See https://cra.link/PWA\r\nprecacheAndRoute(self.__WB_MANIFEST);\r\n\r\n// Set up App Shell-style routing, so that all navigation requests\r\n// are fulfilled with your index.html shell. Learn more at\r\n// https://developers.google.com/web/fundamentals/architecture/app-shell\r\nconst fileExtensionRegexp = new RegExp('/[^/?]+\\\\.[^/]+$');\r\nregisterRoute(\r\n  // Return false to exempt requests from being fulfilled by index.html.\r\n  ({ request, url }) => {\r\n    // If this isn't a navigation, skip.\r\n    if (request.mode !== 'navigate') {\r\n      return false;\r\n    } // If this is a URL that starts with /_, skip.\r\n\r\n    if (url.pathname.startsWith('/_')) {\r\n      return false;\r\n    } // If this looks like a URL for a resource, because it contains // a file extension, skip.\r\n\r\n    if (url.pathname.match(fileExtensionRegexp)) {\r\n      return false;\r\n    } // Return true to signal that we want to use the handler.\r\n\r\n    return true;\r\n  },\r\n  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')\r\n);\r\n\r\n// An example runtime caching route for requests that aren't handled by the\r\n// precache, in this case same-origin .png requests like those from in public/\r\nregisterRoute(\r\n  // Add in any other file extensions or routing criteria as needed.\r\n  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.\r\n  new StaleWhileRevalidate({\r\n    cacheName: 'images',\r\n    plugins: [\r\n      // Ensure that once this runtime cache reaches a maximum size the\r\n      // least-recently used images are removed.\r\n      new ExpirationPlugin({ maxEntries: 50 }),\r\n    ],\r\n  })\r\n);\r\n\r\n// This allows the web app to trigger skipWaiting via\r\n// registration.waiting.postMessage({type: 'SKIP_WAITING'})\r\nself.addEventListener('message', (event) => {\r\n  if (event.data && event.data.type === 'SKIP_WAITING') {\r\n    self.skipWaiting();\r\n  }\r\n});\r\n\r\n// Any other custom service worker logic can go here.\r\n"],"mappings":"AAAA,2CAEA;AACA;AACA;AACA;AACA;AACA;AAEA,OAASA,YAAY,KAAQ,cAAc,CAC3C,OAASC,gBAAgB,KAAQ,oBAAoB,CACrD,OAASC,gBAAgB,CAAEC,uBAAuB,KAAQ,oBAAoB,CAC9E,OAASC,aAAa,KAAQ,iBAAiB,CAC/C,OAASC,oBAAoB,KAAQ,oBAAoB,CAEzDL,YAAY,EAAE,CAEd;AACA;AACA;AACA;AACAE,gBAAgB,CAACI,IAAI,CAACC,aAAa,CAAC,CAEpC;AACA;AACA;AACA,GAAMC,oBAAmB,CAAG,GAAIC,OAAM,CAAC,kBAAkB,CAAC,CAC1DL,aAAa,CACX;AACA,cAAsB,IAAnBM,QAAO,MAAPA,OAAO,CAAEC,GAAG,MAAHA,GAAG,CACb;AACA,GAAID,OAAO,CAACE,IAAI,GAAK,UAAU,CAAE,CAC/B,MAAO,MAAK,CACd,CAAE;AAEF,GAAID,GAAG,CAACE,QAAQ,CAACC,UAAU,CAAC,IAAI,CAAC,CAAE,CACjC,MAAO,MAAK,CACd,CAAE;AAEF,GAAIH,GAAG,CAACE,QAAQ,CAACE,KAAK,CAACP,mBAAmB,CAAC,CAAE,CAC3C,MAAO,MAAK,CACd,CAAE;AAEF,MAAO,KAAI,CACb,CAAC,CACDL,uBAAuB,CAACa,OAAO,CAACC,GAAG,CAACC,UAAU,CAAG,aAAa,CAAC,CAChE,CAED;AACA;AACAd,aAAa,CACX;AACA,mBAAGO,IAAG,OAAHA,GAAG,OAAOA,IAAG,CAACQ,MAAM,GAAKb,IAAI,CAACc,QAAQ,CAACD,MAAM,EAAIR,GAAG,CAACE,QAAQ,CAACQ,QAAQ,CAAC,MAAM,CAAC,GAAE;AACnF,GAAIhB,qBAAoB,CAAC,CACvBiB,SAAS,CAAE,QAAQ,CACnBC,OAAO,CAAE,CACP;AACA;AACA,GAAItB,iBAAgB,CAAC,CAAEuB,UAAU,CAAE,EAAG,CAAC,CAAC,CAE5C,CAAC,CAAC,CACH,CAED;AACA;AACAlB,IAAI,CAACmB,gBAAgB,CAAC,SAAS,CAAE,SAACC,KAAK,CAAK,CAC1C,GAAIA,KAAK,CAACC,IAAI,EAAID,KAAK,CAACC,IAAI,CAACC,IAAI,GAAK,cAAc,CAAE,CACpDtB,IAAI,CAACuB,WAAW,EAAE,CACpB,CACF,CAAC,CAAC,CAEF"},"metadata":{},"sourceType":"module","externalDependencies":[]}