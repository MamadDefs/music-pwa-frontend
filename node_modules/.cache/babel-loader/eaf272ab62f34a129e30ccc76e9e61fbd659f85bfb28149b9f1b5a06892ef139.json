{"ast":null,"code":"import _regeneratorRuntime from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createClass from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport '../_version.js';\n/**\r\n * A plugin, designed to be used with PrecacheController, to determine the\r\n * of assets that were updated (or not updated) during the install event.\r\n *\r\n * @private\r\n */\nvar PrecacheInstallReportPlugin = /*#__PURE__*/_createClass(function PrecacheInstallReportPlugin() {\n  var _this = this;\n  _classCallCheck(this, PrecacheInstallReportPlugin);\n  this.updatedURLs = [];\n  this.notUpdatedURLs = [];\n  this.handlerWillStart = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {\n      var request, state;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            request = _ref.request, state = _ref.state;\n            // TODO: `state` should never be undefined...\n            if (state) {\n              state.originalRequest = request;\n            }\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  this.cachedResponseWillBeUsed = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref3) {\n      var event, state, cachedResponse, url;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            event = _ref3.event, state = _ref3.state, cachedResponse = _ref3.cachedResponse;\n            if (event.type === 'install') {\n              if (state && state.originalRequest && state.originalRequest instanceof Request) {\n                // TODO: `state` should never be undefined...\n                url = state.originalRequest.url;\n                if (cachedResponse) {\n                  _this.notUpdatedURLs.push(url);\n                } else {\n                  _this.updatedURLs.push(url);\n                }\n              }\n            }\n            return _context2.abrupt(\"return\", cachedResponse);\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function (_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n});\nexport { PrecacheInstallReportPlugin };","map":{"version":3,"names":["PrecacheInstallReportPlugin","updatedURLs","notUpdatedURLs","handlerWillStart","request","state","originalRequest","cachedResponseWillBeUsed","event","cachedResponse","type","Request","url","push"],"sources":["D:/github/music-pwa-frontend/node_modules/workbox-precaching/utils/PrecacheInstallReportPlugin.js"],"sourcesContent":["/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport '../_version.js';\r\n/**\r\n * A plugin, designed to be used with PrecacheController, to determine the\r\n * of assets that were updated (or not updated) during the install event.\r\n *\r\n * @private\r\n */\r\nclass PrecacheInstallReportPlugin {\r\n    constructor() {\r\n        this.updatedURLs = [];\r\n        this.notUpdatedURLs = [];\r\n        this.handlerWillStart = async ({ request, state, }) => {\r\n            // TODO: `state` should never be undefined...\r\n            if (state) {\r\n                state.originalRequest = request;\r\n            }\r\n        };\r\n        this.cachedResponseWillBeUsed = async ({ event, state, cachedResponse, }) => {\r\n            if (event.type === 'install') {\r\n                if (state &&\r\n                    state.originalRequest &&\r\n                    state.originalRequest instanceof Request) {\r\n                    // TODO: `state` should never be undefined...\r\n                    const url = state.originalRequest.url;\r\n                    if (cachedResponse) {\r\n                        this.notUpdatedURLs.push(url);\r\n                    }\r\n                    else {\r\n                        this.updatedURLs.push(url);\r\n                    }\r\n                }\r\n            }\r\n            return cachedResponse;\r\n        };\r\n    }\r\n}\r\nexport { PrecacheInstallReportPlugin };\r\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAgB;AACvB;AACA;AACA;AACA;AACA;AACA;AALA,IAMMA,2BAA2B,6BAC7B,uCAAc;EAAA;EAAA;EACV,IAAI,CAACC,WAAW,GAAG,EAAE;EACrB,IAAI,CAACC,cAAc,GAAG,EAAE;EACxB,IAAI,CAACC,gBAAgB;IAAA,uEAAG;MAAA;MAAA;QAAA;UAAA;YAASC,OAAO,QAAPA,OAAO,EAAEC,KAAK,QAALA,KAAK;YAC3C;YACA,IAAIA,KAAK,EAAE;cACPA,KAAK,CAACC,eAAe,GAAGF,OAAO;YACnC;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA,CACJ;IAAA;MAAA;IAAA;EAAA;EACD,IAAI,CAACG,wBAAwB;IAAA,uEAAG;MAAA;MAAA;QAAA;UAAA;YAASC,KAAK,SAALA,KAAK,EAAEH,KAAK,SAALA,KAAK,EAAEI,cAAc,SAAdA,cAAc;YACjE,IAAID,KAAK,CAACE,IAAI,KAAK,SAAS,EAAE;cAC1B,IAAIL,KAAK,IACLA,KAAK,CAACC,eAAe,IACrBD,KAAK,CAACC,eAAe,YAAYK,OAAO,EAAE;gBAC1C;gBACMC,GAAG,GAAGP,KAAK,CAACC,eAAe,CAACM,GAAG;gBACrC,IAAIH,cAAc,EAAE;kBAChB,KAAI,CAACP,cAAc,CAACW,IAAI,CAACD,GAAG,CAAC;gBACjC,CAAC,MACI;kBACD,KAAI,CAACX,WAAW,CAACY,IAAI,CAACD,GAAG,CAAC;gBAC9B;cACJ;YACJ;YAAC,kCACMH,cAAc;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACxB;IAAA;MAAA;IAAA;EAAA;AACL,CAAC;AAEL,SAAST,2BAA2B"},"metadata":{},"sourceType":"module","externalDependencies":[]}