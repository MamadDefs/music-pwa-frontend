{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\r\n * NavigationRoute makes it easy to create a\r\n * {@link workbox-routing.Route} that matches for browser\r\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\r\n *\r\n * It will only match incoming Requests whose\r\n * {@link https://fetch.spec.whatwg.org/#concept-request-mode|mode}\r\n * is set to `navigate`.\r\n *\r\n * You can optionally only apply this route to a subset of navigation requests\r\n * by using one or both of the `denylist` and `allowlist` parameters.\r\n *\r\n * @memberof workbox-routing\r\n * @extends workbox-routing.Route\r\n */\nvar NavigationRoute = /*#__PURE__*/function (_Route) {\n  _inherits(NavigationRoute, _Route);\n  var _super = _createSuper(NavigationRoute);\n  /**\r\n   * If both `denylist` and `allowlist` are provided, the `denylist` will\r\n   * take precedence and the request will not match this route.\r\n   *\r\n   * The regular expressions in `allowlist` and `denylist`\r\n   * are matched against the concatenated\r\n   * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\r\n   * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\r\n   * portions of the requested URL.\r\n   *\r\n   * *Note*: These RegExps may be evaluated against every destination URL during\r\n   * a navigation. Avoid using\r\n   * [complex RegExps](https://github.com/GoogleChrome/workbox/issues/3077),\r\n   * or else your users may see delays when navigating your site.\r\n   *\r\n   * @param {workbox-routing~handlerCallback} handler A callback\r\n   * function that returns a Promise resulting in a Response.\r\n   * @param {Object} options\r\n   * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\r\n   * the route will not handle the request (even if a allowlist RegExp matches).\r\n   * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\r\n   * match the URL's pathname and search parameter, the route will handle the\r\n   * request (assuming the denylist doesn't match).\r\n   */\n  function NavigationRoute(handler) {\n    var _this;\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$allowlist = _ref.allowlist,\n      allowlist = _ref$allowlist === void 0 ? [/./] : _ref$allowlist,\n      _ref$denylist = _ref.denylist,\n      denylist = _ref$denylist === void 0 ? [] : _ref$denylist;\n    _classCallCheck(this, NavigationRoute);\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isArrayOfClass(allowlist, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'NavigationRoute',\n        funcName: 'constructor',\n        paramName: 'options.allowlist'\n      });\n      assert.isArrayOfClass(denylist, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'NavigationRoute',\n        funcName: 'constructor',\n        paramName: 'options.denylist'\n      });\n    }\n    _this = _super.call(this, function (options) {\n      return _this._match(options);\n    }, handler);\n    _this._allowlist = allowlist;\n    _this._denylist = denylist;\n    return _this;\n  }\n  /**\r\n   * Routes match handler.\r\n   *\r\n   * @param {Object} options\r\n   * @param {URL} options.url\r\n   * @param {Request} options.request\r\n   * @return {boolean}\r\n   *\r\n   * @private\r\n   */\n  _createClass(NavigationRoute, [{\n    key: \"_match\",\n    value: function _match(_ref2) {\n      var url = _ref2.url,\n        request = _ref2.request;\n      if (request && request.mode !== 'navigate') {\n        return false;\n      }\n      var pathnameAndSearch = url.pathname + url.search;\n      var _iterator = _createForOfIteratorHelper(this._denylist),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var regExp = _step.value;\n          if (regExp.test(pathnameAndSearch)) {\n            if (process.env.NODE_ENV !== 'production') {\n              logger.log(\"The navigation route \".concat(pathnameAndSearch, \" is not \") + \"being used, since the URL matches this denylist pattern: \" + \"\".concat(regExp.toString()));\n            }\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (this._allowlist.some(function (regExp) {\n        return regExp.test(pathnameAndSearch);\n      })) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.debug(\"The navigation route \".concat(pathnameAndSearch, \" \") + \"is being used.\");\n        }\n        return true;\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        logger.log(\"The navigation route \".concat(pathnameAndSearch, \" is not \") + \"being used, since the URL being navigated to doesn't \" + \"match the allowlist.\");\n      }\n      return false;\n    }\n  }]);\n  return NavigationRoute;\n}(Route);\nexport { NavigationRoute };","map":{"version":3,"names":["assert","logger","Route","NavigationRoute","handler","allowlist","denylist","process","env","NODE_ENV","isArrayOfClass","RegExp","moduleName","className","funcName","paramName","options","_match","_allowlist","_denylist","url","request","mode","pathnameAndSearch","pathname","search","regExp","test","log","toString","some","debug"],"sources":["D:/github/music-pwa-frontend/node_modules/workbox-routing/NavigationRoute.js"],"sourcesContent":["/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { Route } from './Route.js';\r\nimport './_version.js';\r\n/**\r\n * NavigationRoute makes it easy to create a\r\n * {@link workbox-routing.Route} that matches for browser\r\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\r\n *\r\n * It will only match incoming Requests whose\r\n * {@link https://fetch.spec.whatwg.org/#concept-request-mode|mode}\r\n * is set to `navigate`.\r\n *\r\n * You can optionally only apply this route to a subset of navigation requests\r\n * by using one or both of the `denylist` and `allowlist` parameters.\r\n *\r\n * @memberof workbox-routing\r\n * @extends workbox-routing.Route\r\n */\r\nclass NavigationRoute extends Route {\r\n    /**\r\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\r\n     * take precedence and the request will not match this route.\r\n     *\r\n     * The regular expressions in `allowlist` and `denylist`\r\n     * are matched against the concatenated\r\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\r\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\r\n     * portions of the requested URL.\r\n     *\r\n     * *Note*: These RegExps may be evaluated against every destination URL during\r\n     * a navigation. Avoid using\r\n     * [complex RegExps](https://github.com/GoogleChrome/workbox/issues/3077),\r\n     * or else your users may see delays when navigating your site.\r\n     *\r\n     * @param {workbox-routing~handlerCallback} handler A callback\r\n     * function that returns a Promise resulting in a Response.\r\n     * @param {Object} options\r\n     * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\r\n     * the route will not handle the request (even if a allowlist RegExp matches).\r\n     * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\r\n     * match the URL's pathname and search parameter, the route will handle the\r\n     * request (assuming the denylist doesn't match).\r\n     */\r\n    constructor(handler, { allowlist = [/./], denylist = [] } = {}) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isArrayOfClass(allowlist, RegExp, {\r\n                moduleName: 'workbox-routing',\r\n                className: 'NavigationRoute',\r\n                funcName: 'constructor',\r\n                paramName: 'options.allowlist',\r\n            });\r\n            assert.isArrayOfClass(denylist, RegExp, {\r\n                moduleName: 'workbox-routing',\r\n                className: 'NavigationRoute',\r\n                funcName: 'constructor',\r\n                paramName: 'options.denylist',\r\n            });\r\n        }\r\n        super((options) => this._match(options), handler);\r\n        this._allowlist = allowlist;\r\n        this._denylist = denylist;\r\n    }\r\n    /**\r\n     * Routes match handler.\r\n     *\r\n     * @param {Object} options\r\n     * @param {URL} options.url\r\n     * @param {Request} options.request\r\n     * @return {boolean}\r\n     *\r\n     * @private\r\n     */\r\n    _match({ url, request }) {\r\n        if (request && request.mode !== 'navigate') {\r\n            return false;\r\n        }\r\n        const pathnameAndSearch = url.pathname + url.search;\r\n        for (const regExp of this._denylist) {\r\n            if (regExp.test(pathnameAndSearch)) {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    logger.log(`The navigation route ${pathnameAndSearch} is not ` +\r\n                        `being used, since the URL matches this denylist pattern: ` +\r\n                        `${regExp.toString()}`);\r\n                }\r\n                return false;\r\n            }\r\n        }\r\n        if (this._allowlist.some((regExp) => regExp.test(pathnameAndSearch))) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.debug(`The navigation route ${pathnameAndSearch} ` + `is being used.`);\r\n            }\r\n            return true;\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.log(`The navigation route ${pathnameAndSearch} is not ` +\r\n                `being used, since the URL being navigated to doesn't ` +\r\n                `match the allowlist.`);\r\n        }\r\n        return false;\r\n    }\r\n}\r\nexport { NavigationRoute };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}