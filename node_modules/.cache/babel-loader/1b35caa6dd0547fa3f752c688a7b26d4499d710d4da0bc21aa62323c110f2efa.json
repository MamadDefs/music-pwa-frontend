{"ast":null,"code":"var _jsxFileName = \"/home/saoshyant/Documents/GitHub/music-pwa-frontend/src/componenets/MusicPlayer/MusicPlayer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport useSound from 'use-sound';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicPlayer = _ref => {\n  _s();\n  let {\n    musicInfo\n  } = _ref;\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [play, {\n    pause,\n    stop,\n    duration,\n    sound\n  }] = useSound(musicInfo === null || musicInfo === void 0 ? void 0 : musicInfo.musicPath);\n  useEffect(() => {\n    stop();\n  }, [musicInfo]);\n  const playingButton = () => {\n    if (isPlaying) {\n      pause(); // this will pause the audio\n      setIsPlaying(false);\n    } else {\n      play(); // this will play the audio\n      setIsPlaying(true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      onClick: playingButton,\n      style: {\n        color: 'white'\n      },\n      children: [\"play---\", parseInt(duration / 72000), \"min:\", duration / 60]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicPlayer, \"mszNf/shdC5EBRHqn5YiO+KzCXo=\", false, function () {\n  return [useSound];\n});\n_c = MusicPlayer;\nexport default MusicPlayer;\nvar _c;\n$RefreshReg$(_c, \"MusicPlayer\");","map":{"version":3,"names":["React","useState","useEffect","useSound","MusicPlayer","musicInfo","isPlaying","setIsPlaying","play","pause","stop","duration","sound","musicPath","playingButton","color","parseInt"],"sources":["/home/saoshyant/Documents/GitHub/music-pwa-frontend/src/componenets/MusicPlayer/MusicPlayer.jsx"],"sourcesContent":["import React,{useState,useEffect} from 'react'\nimport useSound from 'use-sound'\n\nconst MusicPlayer = ({musicInfo}) => {\n\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [play, { pause,stop, duration, sound }] = useSound(musicInfo?.musicPath);\n\n  useEffect(()=>{\n    stop();\n  },[musicInfo])\n\n  const playingButton = () => {\n    if (isPlaying) {\n      pause(); // this will pause the audio\n      setIsPlaying(false);\n    } else {\n      play(); // this will play the audio\n      setIsPlaying(true);\n    }\n  };\n  return (\n    <div>\n      <p onClick={playingButton} style={{color:'white'}}>play---{parseInt(duration/72000)}min:{duration/60}</p>\n      {/* {<audio src={musicInfo?.musicPath} autoPlay={true}/>} */}\n    </div>\n  )\n}\n\nexport default MusicPlayer"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,QAAQ,EAACC,SAAS,QAAO,OAAO;AAC9C,OAAOC,QAAQ,MAAM,WAAW;AAAA;AAEhC,MAAMC,WAAW,GAAG,QAAiB;EAAA;EAAA,IAAhB;IAACC;EAAS,CAAC;EAE9B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACO,IAAI,EAAE;IAAEC,KAAK;IAACC,IAAI;IAAEC,QAAQ;IAAEC;EAAM,CAAC,CAAC,GAAGT,QAAQ,CAACE,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEQ,SAAS,CAAC;EAE9EX,SAAS,CAAC,MAAI;IACZQ,IAAI,EAAE;EACR,CAAC,EAAC,CAACL,SAAS,CAAC,CAAC;EAEd,MAAMS,aAAa,GAAG,MAAM;IAC1B,IAAIR,SAAS,EAAE;MACbG,KAAK,EAAE,CAAC,CAAC;MACTF,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,MAAM;MACLC,IAAI,EAAE,CAAC,CAAC;MACRD,YAAY,CAAC,IAAI,CAAC;IACpB;EACF,CAAC;EACD,oBACE;IAAA,uBACE;MAAG,OAAO,EAAEO,aAAc;MAAC,KAAK,EAAE;QAACC,KAAK,EAAC;MAAO,CAAE;MAAA,WAAC,SAAO,EAACC,QAAQ,CAACL,QAAQ,GAAC,KAAK,CAAC,EAAC,MAAI,EAACA,QAAQ,GAAC,EAAE;IAAA;MAAA;MAAA;MAAA;IAAA;EAAK;IAAA;IAAA;IAAA;EAAA,QAErG;AAEV,CAAC;AAAA,GAxBKP,WAAW;EAAA,QAGiCD,QAAQ;AAAA;AAAA,KAHpDC,WAAW;AA0BjB,eAAeA,WAAW;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}