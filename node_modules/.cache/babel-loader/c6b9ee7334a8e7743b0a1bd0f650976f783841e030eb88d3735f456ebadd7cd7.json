{"ast":null,"code":"import _createClass from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\n/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\r\n * `PrecacheFallbackPlugin` allows you to specify an \"offline fallback\"\r\n * response to be used when a given strategy is unable to generate a response.\r\n *\r\n * It does this by intercepting the `handlerDidError` plugin callback\r\n * and returning a precached response, taking the expected revision parameter\r\n * into account automatically.\r\n *\r\n * Unless you explicitly pass in a `PrecacheController` instance to the\r\n * constructor, the default instance will be used. Generally speaking, most\r\n * developers will end up using the default.\r\n *\r\n * @memberof workbox-precaching\r\n */\nvar PrecacheFallbackPlugin = /*#__PURE__*/_createClass(\n/**\r\n * Constructs a new PrecacheFallbackPlugin with the associated fallbackURL.\r\n *\r\n * @param {Object} config\r\n * @param {string} config.fallbackURL A precached URL to use as the fallback\r\n *     if the associated strategy can't generate a response.\r\n * @param {PrecacheController} [config.precacheController] An optional\r\n *     PrecacheController instance. If not provided, the default\r\n *     PrecacheController will be used.\r\n */\nfunction PrecacheFallbackPlugin(_ref) {\n  var _this = this;\n  var fallbackURL = _ref.fallbackURL,\n    precacheController = _ref.precacheController;\n  _classCallCheck(this, PrecacheFallbackPlugin);\n  /**\r\n   * @return {Promise<Response>} The precache response for the fallback URL.\r\n   *\r\n   * @private\r\n   */\n  this.handlerDidError = function () {\n    return _this._precacheController.matchPrecache(_this._fallbackURL);\n  };\n  this._fallbackURL = fallbackURL;\n  this._precacheController = precacheController || getOrCreatePrecacheController();\n});\nexport { PrecacheFallbackPlugin };","map":{"version":3,"names":["getOrCreatePrecacheController","PrecacheFallbackPlugin","fallbackURL","precacheController","handlerDidError","_precacheController","matchPrecache","_fallbackURL"],"sources":["D:/github/music-pwa-frontend/node_modules/workbox-precaching/PrecacheFallbackPlugin.js"],"sourcesContent":["/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport './_version.js';\r\n/**\r\n * `PrecacheFallbackPlugin` allows you to specify an \"offline fallback\"\r\n * response to be used when a given strategy is unable to generate a response.\r\n *\r\n * It does this by intercepting the `handlerDidError` plugin callback\r\n * and returning a precached response, taking the expected revision parameter\r\n * into account automatically.\r\n *\r\n * Unless you explicitly pass in a `PrecacheController` instance to the\r\n * constructor, the default instance will be used. Generally speaking, most\r\n * developers will end up using the default.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nclass PrecacheFallbackPlugin {\r\n    /**\r\n     * Constructs a new PrecacheFallbackPlugin with the associated fallbackURL.\r\n     *\r\n     * @param {Object} config\r\n     * @param {string} config.fallbackURL A precached URL to use as the fallback\r\n     *     if the associated strategy can't generate a response.\r\n     * @param {PrecacheController} [config.precacheController] An optional\r\n     *     PrecacheController instance. If not provided, the default\r\n     *     PrecacheController will be used.\r\n     */\r\n    constructor({ fallbackURL, precacheController, }) {\r\n        /**\r\n         * @return {Promise<Response>} The precache response for the fallback URL.\r\n         *\r\n         * @private\r\n         */\r\n        this.handlerDidError = () => this._precacheController.matchPrecache(this._fallbackURL);\r\n        this._fallbackURL = fallbackURL;\r\n        this._precacheController =\r\n            precacheController || getOrCreatePrecacheController();\r\n    }\r\n}\r\nexport { PrecacheFallbackPlugin };\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,6BAA6B,QAAQ,0CAA0C;AACxF,OAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA,IAcMC,sBAAsB;AACxB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,sCAAkD;EAAA;EAAA,IAApCC,WAAW,QAAXA,WAAW;IAAEC,kBAAkB,QAAlBA,kBAAkB;EAAA;EACzC;AACR;AACA;AACA;AACA;EACQ,IAAI,CAACC,eAAe,GAAG;IAAA,OAAM,KAAI,CAACC,mBAAmB,CAACC,aAAa,CAAC,KAAI,CAACC,YAAY,CAAC;EAAA;EACtF,IAAI,CAACA,YAAY,GAAGL,WAAW;EAC/B,IAAI,CAACG,mBAAmB,GACpBF,kBAAkB,IAAIH,6BAA6B,EAAE;AAC7D,CAAC;AAEL,SAASC,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}