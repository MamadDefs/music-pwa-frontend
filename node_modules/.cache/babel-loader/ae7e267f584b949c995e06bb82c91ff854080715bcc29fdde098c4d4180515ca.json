{"ast":null,"code":"import _regeneratorRuntime from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\r\n * An implementation of a [cache-first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-first-falling-back-to-network)\r\n * request strategy.\r\n *\r\n * A cache first strategy is useful for assets that have been revisioned,\r\n * such as URLs like `/styles/example.a8f5f1.css`, since they\r\n * can be cached for long periods of time.\r\n *\r\n * If the network request fails, and there is no cache match, this will throw\r\n * a `WorkboxError` exception.\r\n *\r\n * @extends workbox-strategies.Strategy\r\n * @memberof workbox-strategies\r\n */\nvar CacheFirst = /*#__PURE__*/function (_Strategy) {\n  _inherits(CacheFirst, _Strategy);\n  var _super = _createSuper(CacheFirst);\n  function CacheFirst() {\n    _classCallCheck(this, CacheFirst);\n    return _super.apply(this, arguments);\n  }\n  _createClass(CacheFirst, [{\n    key: \"_handle\",\n    value:\n    /**\r\n     * @private\r\n     * @param {Request|string} request A request to run this strategy for.\r\n     * @param {workbox-strategies.StrategyHandler} handler The event that\r\n     *     triggered the request.\r\n     * @return {Promise<Response>}\r\n     */\n    function () {\n      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request, handler) {\n        var logs, response, error, _iterator, _step, log;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              logs = [];\n              if (process.env.NODE_ENV !== 'production') {\n                assert.isInstance(request, Request, {\n                  moduleName: 'workbox-strategies',\n                  className: this.constructor.name,\n                  funcName: 'makeRequest',\n                  paramName: 'request'\n                });\n              }\n              _context.next = 4;\n              return handler.cacheMatch(request);\n            case 4:\n              response = _context.sent;\n              error = undefined;\n              if (response) {\n                _context.next = 20;\n                break;\n              }\n              if (process.env.NODE_ENV !== 'production') {\n                logs.push(\"No response found in the '\".concat(this.cacheName, \"' cache. \") + \"Will respond with a network request.\");\n              }\n              _context.prev = 8;\n              _context.next = 11;\n              return handler.fetchAndCachePut(request);\n            case 11:\n              response = _context.sent;\n              _context.next = 17;\n              break;\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](8);\n              if (_context.t0 instanceof Error) {\n                error = _context.t0;\n              }\n            case 17:\n              if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                  logs.push(\"Got response from network.\");\n                } else {\n                  logs.push(\"Unable to get a response from the network.\");\n                }\n              }\n              _context.next = 21;\n              break;\n            case 20:\n              if (process.env.NODE_ENV !== 'production') {\n                logs.push(\"Found a cached response in the '\".concat(this.cacheName, \"' cache.\"));\n              }\n            case 21:\n              if (process.env.NODE_ENV !== 'production') {\n                logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n                _iterator = _createForOfIteratorHelper(logs);\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    log = _step.value;\n                    logger.log(log);\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n                messages.printFinalResponse(response);\n                logger.groupEnd();\n              }\n              if (response) {\n                _context.next = 24;\n                break;\n              }\n              throw new WorkboxError('no-response', {\n                url: request.url,\n                error: error\n              });\n            case 24:\n              return _context.abrupt(\"return\", response);\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[8, 14]]);\n      }));\n      function _handle(_x, _x2) {\n        return _handle2.apply(this, arguments);\n      }\n      return _handle;\n    }()\n  }]);\n  return CacheFirst;\n}(Strategy);\nexport { CacheFirst };","map":{"version":3,"names":["assert","logger","WorkboxError","Strategy","messages","CacheFirst","request","handler","logs","process","env","NODE_ENV","isInstance","Request","moduleName","className","constructor","name","funcName","paramName","cacheMatch","response","error","undefined","push","cacheName","fetchAndCachePut","Error","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url"],"sources":["D:/github/music-pwa-frontend/node_modules/workbox-strategies/CacheFirst.js"],"sourcesContent":["/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { Strategy } from './Strategy.js';\r\nimport { messages } from './utils/messages.js';\r\nimport './_version.js';\r\n/**\r\n * An implementation of a [cache-first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-first-falling-back-to-network)\r\n * request strategy.\r\n *\r\n * A cache first strategy is useful for assets that have been revisioned,\r\n * such as URLs like `/styles/example.a8f5f1.css`, since they\r\n * can be cached for long periods of time.\r\n *\r\n * If the network request fails, and there is no cache match, this will throw\r\n * a `WorkboxError` exception.\r\n *\r\n * @extends workbox-strategies.Strategy\r\n * @memberof workbox-strategies\r\n */\r\nclass CacheFirst extends Strategy {\r\n    /**\r\n     * @private\r\n     * @param {Request|string} request A request to run this strategy for.\r\n     * @param {workbox-strategies.StrategyHandler} handler The event that\r\n     *     triggered the request.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async _handle(request, handler) {\r\n        const logs = [];\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(request, Request, {\r\n                moduleName: 'workbox-strategies',\r\n                className: this.constructor.name,\r\n                funcName: 'makeRequest',\r\n                paramName: 'request',\r\n            });\r\n        }\r\n        let response = await handler.cacheMatch(request);\r\n        let error = undefined;\r\n        if (!response) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\r\n                    `Will respond with a network request.`);\r\n            }\r\n            try {\r\n                response = await handler.fetchAndCachePut(request);\r\n            }\r\n            catch (err) {\r\n                if (err instanceof Error) {\r\n                    error = err;\r\n                }\r\n            }\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (response) {\r\n                    logs.push(`Got response from network.`);\r\n                }\r\n                else {\r\n                    logs.push(`Unable to get a response from the network.`);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\r\n            }\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\r\n            for (const log of logs) {\r\n                logger.log(log);\r\n            }\r\n            messages.printFinalResponse(response);\r\n            logger.groupEnd();\r\n        }\r\n        if (!response) {\r\n            throw new WorkboxError('no-response', { url: request.url, error });\r\n        }\r\n        return response;\r\n    }\r\n}\r\nexport { CacheFirst };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}