{"ast":null,"code":"import _regeneratorRuntime from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n  return typeof input === 'string' ? new Request(input) : input;\n}\n/**\r\n * A class created every time a Strategy instance instance calls\r\n * {@link workbox-strategies.Strategy~handle} or\r\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\r\n * cache actions around plugin callbacks and keeps track of when the strategy\r\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\r\n *\r\n * @memberof workbox-strategies\r\n */\nvar StrategyHandler = /*#__PURE__*/function () {\n  /**\r\n   * Creates a new instance associated with the passed strategy and event\r\n   * that's handling the request.\r\n   *\r\n   * The constructor also initializes the state that will be passed to each of\r\n   * the plugins handling this request.\r\n   *\r\n   * @param {workbox-strategies.Strategy} strategy\r\n   * @param {Object} options\r\n   * @param {Request|string} options.request A request to run this strategy for.\r\n   * @param {ExtendableEvent} options.event The event associated with the\r\n   *     request.\r\n   * @param {URL} [options.url]\r\n   * @param {*} [options.params] The return value from the\r\n   *     {@link workbox-routing~matchCallback} (if applicable).\r\n   */\n  function StrategyHandler(strategy, options) {\n    _classCallCheck(this, StrategyHandler);\n    this._cacheKeys = {};\n    /**\r\n     * The request the strategy is performing (passed to the strategy's\r\n     * `handle()` or `handleAll()` method).\r\n     * @name request\r\n     * @instance\r\n     * @type {Request}\r\n     * @memberof workbox-strategies.StrategyHandler\r\n     */\n    /**\r\n     * The event associated with this request.\r\n     * @name event\r\n     * @instance\r\n     * @type {ExtendableEvent}\r\n     * @memberof workbox-strategies.StrategyHandler\r\n     */\n    /**\r\n     * A `URL` instance of `request.url` (if passed to the strategy's\r\n     * `handle()` or `handleAll()` method).\r\n     * Note: the `url` param will be present if the strategy was invoked\r\n     * from a workbox `Route` object.\r\n     * @name url\r\n     * @instance\r\n     * @type {URL|undefined}\r\n     * @memberof workbox-strategies.StrategyHandler\r\n     */\n    /**\r\n     * A `param` value (if passed to the strategy's\r\n     * `handle()` or `handleAll()` method).\r\n     * Note: the `param` param will be present if the strategy was invoked\r\n     * from a workbox `Route` object and the\r\n     * {@link workbox-routing~matchCallback} returned\r\n     * a truthy value (it will be that value).\r\n     * @name params\r\n     * @instance\r\n     * @type {*|undefined}\r\n     * @memberof workbox-strategies.StrategyHandler\r\n     */\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(options.event, ExtendableEvent, {\n        moduleName: 'workbox-strategies',\n        className: 'StrategyHandler',\n        funcName: 'constructor',\n        paramName: 'options.event'\n      });\n    }\n    Object.assign(this, options);\n    this.event = options.event;\n    this._strategy = strategy;\n    this._handlerDeferred = new Deferred();\n    this._extendLifetimePromises = [];\n    // Copy the plugins list (since it's mutable on the strategy),\n    // so any mutations don't affect this handler instance.\n    this._plugins = _toConsumableArray(strategy.plugins);\n    this._pluginStateMap = new Map();\n    var _iterator = _createForOfIteratorHelper(this._plugins),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var plugin = _step.value;\n        this._pluginStateMap.set(plugin, {});\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    this.event.waitUntil(this._handlerDeferred.promise);\n  }\n  /**\r\n   * Fetches a given request (and invokes any applicable plugin callback\r\n   * methods) using the `fetchOptions` (for non-navigation requests) and\r\n   * `plugins` defined on the `Strategy` object.\r\n   *\r\n   * The following plugin lifecycle methods are invoked when using this method:\r\n   * - `requestWillFetch()`\r\n   * - `fetchDidSucceed()`\r\n   * - `fetchDidFail()`\r\n   *\r\n   * @param {Request|string} input The URL or request to fetch.\r\n   * @return {Promise<Response>}\r\n   */\n  _createClass(StrategyHandler, [{\n    key: \"fetch\",\n    value: function (_fetch) {\n      function fetch(_x) {\n        return _fetch.apply(this, arguments);\n      }\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n      return fetch;\n    }(\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(input) {\n        var event, request, possiblePreloadResponse, originalRequest, _iterator2, _step2, cb, pluginFilteredRequest, fetchResponse, _iterator3, _step3, callback;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              event = this.event;\n              request = toRequest(input);\n              if (!(request.mode === 'navigate' && event instanceof FetchEvent && event.preloadResponse)) {\n                _context.next = 9;\n                break;\n              }\n              _context.next = 5;\n              return event.preloadResponse;\n            case 5:\n              possiblePreloadResponse = _context.sent;\n              if (!possiblePreloadResponse) {\n                _context.next = 9;\n                break;\n              }\n              if (process.env.NODE_ENV !== 'production') {\n                logger.log(\"Using a preloaded navigation response for \" + \"'\".concat(getFriendlyURL(request.url), \"'\"));\n              }\n              return _context.abrupt(\"return\", possiblePreloadResponse);\n            case 9:\n              // If there is a fetchDidFail plugin, we need to save a clone of the\n              // original request before it's either modified by a requestWillFetch\n              // plugin or before the original request's body is consumed via fetch().\n              originalRequest = this.hasCallback('fetchDidFail') ? request.clone() : null;\n              _context.prev = 10;\n              _iterator2 = _createForOfIteratorHelper(this.iterateCallbacks('requestWillFetch'));\n              _context.prev = 12;\n              _iterator2.s();\n            case 14:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 21;\n                break;\n              }\n              cb = _step2.value;\n              _context.next = 18;\n              return cb({\n                request: request.clone(),\n                event: event\n              });\n            case 18:\n              request = _context.sent;\n            case 19:\n              _context.next = 14;\n              break;\n            case 21:\n              _context.next = 26;\n              break;\n            case 23:\n              _context.prev = 23;\n              _context.t0 = _context[\"catch\"](12);\n              _iterator2.e(_context.t0);\n            case 26:\n              _context.prev = 26;\n              _iterator2.f();\n              return _context.finish(26);\n            case 29:\n              _context.next = 35;\n              break;\n            case 31:\n              _context.prev = 31;\n              _context.t1 = _context[\"catch\"](10);\n              if (!(_context.t1 instanceof Error)) {\n                _context.next = 35;\n                break;\n              }\n              throw new WorkboxError('plugin-error-request-will-fetch', {\n                thrownErrorMessage: _context.t1.message\n              });\n            case 35:\n              // The request can be altered by plugins with `requestWillFetch` making\n              // the original request (most likely from a `fetch` event) different\n              // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n              pluginFilteredRequest = request.clone();\n              _context.prev = 36;\n              _context.next = 39;\n              return fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            case 39:\n              fetchResponse = _context.sent;\n              if (process.env.NODE_ENV !== 'production') {\n                logger.debug(\"Network request for \" + \"'\".concat(getFriendlyURL(request.url), \"' returned a response with \") + \"status '\".concat(fetchResponse.status, \"'.\"));\n              }\n              _iterator3 = _createForOfIteratorHelper(this.iterateCallbacks('fetchDidSucceed'));\n              _context.prev = 42;\n              _iterator3.s();\n            case 44:\n              if ((_step3 = _iterator3.n()).done) {\n                _context.next = 51;\n                break;\n              }\n              callback = _step3.value;\n              _context.next = 48;\n              return callback({\n                event: event,\n                request: pluginFilteredRequest,\n                response: fetchResponse\n              });\n            case 48:\n              fetchResponse = _context.sent;\n            case 49:\n              _context.next = 44;\n              break;\n            case 51:\n              _context.next = 56;\n              break;\n            case 53:\n              _context.prev = 53;\n              _context.t2 = _context[\"catch\"](42);\n              _iterator3.e(_context.t2);\n            case 56:\n              _context.prev = 56;\n              _iterator3.f();\n              return _context.finish(56);\n            case 59:\n              return _context.abrupt(\"return\", fetchResponse);\n            case 62:\n              _context.prev = 62;\n              _context.t3 = _context[\"catch\"](36);\n              if (process.env.NODE_ENV !== 'production') {\n                logger.log(\"Network request for \" + \"'\".concat(getFriendlyURL(request.url), \"' threw an error.\"), _context.t3);\n              }\n              // `originalRequest` will only exist if a `fetchDidFail` callback\n              // is being used (see above).\n              if (!originalRequest) {\n                _context.next = 68;\n                break;\n              }\n              _context.next = 68;\n              return this.runCallbacks('fetchDidFail', {\n                error: _context.t3,\n                event: event,\n                originalRequest: originalRequest.clone(),\n                request: pluginFilteredRequest.clone()\n              });\n            case 68:\n              throw _context.t3;\n            case 69:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[10, 31], [12, 23, 26, 29], [36, 62], [42, 53, 56, 59]]);\n      }));\n      return function (_x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n    /**\r\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\r\n     * the response generated by `this.fetch()`.\r\n     *\r\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\r\n     * so you do not have to manually call `waitUntil()` on the event.\r\n     *\r\n     * @param {Request|string} input The request or URL to fetch and cache.\r\n     * @return {Promise<Response>}\r\n     */\n    )\n  }, {\n    key: \"fetchAndCachePut\",\n    value: function () {\n      var _fetchAndCachePut = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(input) {\n        var response, responseClone;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.fetch(input);\n            case 2:\n              response = _context2.sent;\n              responseClone = response.clone();\n              void this.waitUntil(this.cachePut(input, responseClone));\n              return _context2.abrupt(\"return\", response);\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function fetchAndCachePut(_x3) {\n        return _fetchAndCachePut.apply(this, arguments);\n      }\n      return fetchAndCachePut;\n    }()\n    /**\r\n     * Matches a request from the cache (and invokes any applicable plugin\r\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\r\n     * defined on the strategy object.\r\n     *\r\n     * The following plugin lifecycle methods are invoked when using this method:\r\n     * - cacheKeyWillByUsed()\r\n     * - cachedResponseWillByUsed()\r\n     *\r\n     * @param {Request|string} key The Request or URL to use as the cache key.\r\n     * @return {Promise<Response|undefined>} A matching response, if found.\r\n     */\n  }, {\n    key: \"cacheMatch\",\n    value: function () {\n      var _cacheMatch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(key) {\n        var request, cachedResponse, _this$_strategy, cacheName, matchOptions, effectiveRequest, multiMatchOptions, _iterator4, _step4, callback;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              request = toRequest(key);\n              _this$_strategy = this._strategy, cacheName = _this$_strategy.cacheName, matchOptions = _this$_strategy.matchOptions;\n              _context3.next = 4;\n              return this.getCacheKey(request, 'read');\n            case 4:\n              effectiveRequest = _context3.sent;\n              multiMatchOptions = Object.assign(Object.assign({}, matchOptions), {\n                cacheName: cacheName\n              });\n              _context3.next = 8;\n              return caches.match(effectiveRequest, multiMatchOptions);\n            case 8:\n              cachedResponse = _context3.sent;\n              if (process.env.NODE_ENV !== 'production') {\n                if (cachedResponse) {\n                  logger.debug(\"Found a cached response in '\".concat(cacheName, \"'.\"));\n                } else {\n                  logger.debug(\"No cached response found in '\".concat(cacheName, \"'.\"));\n                }\n              }\n              _iterator4 = _createForOfIteratorHelper(this.iterateCallbacks('cachedResponseWillBeUsed'));\n              _context3.prev = 11;\n              _iterator4.s();\n            case 13:\n              if ((_step4 = _iterator4.n()).done) {\n                _context3.next = 23;\n                break;\n              }\n              callback = _step4.value;\n              _context3.next = 17;\n              return callback({\n                cacheName: cacheName,\n                matchOptions: matchOptions,\n                cachedResponse: cachedResponse,\n                request: effectiveRequest,\n                event: this.event\n              });\n            case 17:\n              _context3.t0 = _context3.sent;\n              if (_context3.t0) {\n                _context3.next = 20;\n                break;\n              }\n              _context3.t0 = undefined;\n            case 20:\n              cachedResponse = _context3.t0;\n            case 21:\n              _context3.next = 13;\n              break;\n            case 23:\n              _context3.next = 28;\n              break;\n            case 25:\n              _context3.prev = 25;\n              _context3.t1 = _context3[\"catch\"](11);\n              _iterator4.e(_context3.t1);\n            case 28:\n              _context3.prev = 28;\n              _iterator4.f();\n              return _context3.finish(28);\n            case 31:\n              return _context3.abrupt(\"return\", cachedResponse);\n            case 32:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[11, 25, 28, 31]]);\n      }));\n      function cacheMatch(_x4) {\n        return _cacheMatch.apply(this, arguments);\n      }\n      return cacheMatch;\n    }()\n    /**\r\n     * Puts a request/response pair in the cache (and invokes any applicable\r\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\r\n     * the strategy object.\r\n     *\r\n     * The following plugin lifecycle methods are invoked when using this method:\r\n     * - cacheKeyWillByUsed()\r\n     * - cacheWillUpdate()\r\n     * - cacheDidUpdate()\r\n     *\r\n     * @param {Request|string} key The request or URL to use as the cache key.\r\n     * @param {Response} response The response to cache.\r\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\r\n     * not be cached, and `true` otherwise.\r\n     */\n  }, {\n    key: \"cachePut\",\n    value: function () {\n      var _cachePut = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(key, response) {\n        var request, effectiveRequest, vary, responseToCache, _this$_strategy2, cacheName, matchOptions, cache, hasCacheUpdateCallback, oldResponse, _iterator5, _step5, callback;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              request = toRequest(key); // Run in the next task to avoid blocking other cache reads.\n              // https://github.com/w3c/ServiceWorker/issues/1397\n              _context4.next = 3;\n              return timeout(0);\n            case 3:\n              _context4.next = 5;\n              return this.getCacheKey(request, 'write');\n            case 5:\n              effectiveRequest = _context4.sent;\n              if (!(process.env.NODE_ENV !== 'production')) {\n                _context4.next = 11;\n                break;\n              }\n              if (!(effectiveRequest.method && effectiveRequest.method !== 'GET')) {\n                _context4.next = 9;\n                break;\n              }\n              throw new WorkboxError('attempt-to-cache-non-get-request', {\n                url: getFriendlyURL(effectiveRequest.url),\n                method: effectiveRequest.method\n              });\n            case 9:\n              // See https://github.com/GoogleChrome/workbox/issues/2818\n              vary = response.headers.get('Vary');\n              if (vary) {\n                logger.debug(\"The response for \".concat(getFriendlyURL(effectiveRequest.url), \" \") + \"has a 'Vary: \".concat(vary, \"' header. \") + \"Consider setting the {ignoreVary: true} option on your strategy \" + \"to ensure cache matching and deletion works as expected.\");\n              }\n            case 11:\n              if (response) {\n                _context4.next = 14;\n                break;\n              }\n              if (process.env.NODE_ENV !== 'production') {\n                logger.error(\"Cannot cache non-existent response for \" + \"'\".concat(getFriendlyURL(effectiveRequest.url), \"'.\"));\n              }\n              throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url)\n              });\n            case 14:\n              _context4.next = 16;\n              return this._ensureResponseSafeToCache(response);\n            case 16:\n              responseToCache = _context4.sent;\n              if (responseToCache) {\n                _context4.next = 20;\n                break;\n              }\n              if (process.env.NODE_ENV !== 'production') {\n                logger.debug(\"Response '\".concat(getFriendlyURL(effectiveRequest.url), \"' \") + \"will not be cached.\", responseToCache);\n              }\n              return _context4.abrupt(\"return\", false);\n            case 20:\n              _this$_strategy2 = this._strategy, cacheName = _this$_strategy2.cacheName, matchOptions = _this$_strategy2.matchOptions;\n              _context4.next = 23;\n              return self.caches.open(cacheName);\n            case 23:\n              cache = _context4.sent;\n              hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n              if (!hasCacheUpdateCallback) {\n                _context4.next = 31;\n                break;\n              }\n              _context4.next = 28;\n              return cacheMatchIgnoreParams(\n              // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n              // feature. Consider into ways to only add this behavior if using\n              // precaching.\n              cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions);\n            case 28:\n              _context4.t0 = _context4.sent;\n              _context4.next = 32;\n              break;\n            case 31:\n              _context4.t0 = null;\n            case 32:\n              oldResponse = _context4.t0;\n              if (process.env.NODE_ENV !== 'production') {\n                logger.debug(\"Updating the '\".concat(cacheName, \"' cache with a new Response \") + \"for \".concat(getFriendlyURL(effectiveRequest.url), \".\"));\n              }\n              _context4.prev = 34;\n              _context4.next = 37;\n              return cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n            case 37:\n              _context4.next = 46;\n              break;\n            case 39:\n              _context4.prev = 39;\n              _context4.t1 = _context4[\"catch\"](34);\n              if (!(_context4.t1 instanceof Error)) {\n                _context4.next = 46;\n                break;\n              }\n              if (!(_context4.t1.name === 'QuotaExceededError')) {\n                _context4.next = 45;\n                break;\n              }\n              _context4.next = 45;\n              return executeQuotaErrorCallbacks();\n            case 45:\n              throw _context4.t1;\n            case 46:\n              _iterator5 = _createForOfIteratorHelper(this.iterateCallbacks('cacheDidUpdate'));\n              _context4.prev = 47;\n              _iterator5.s();\n            case 49:\n              if ((_step5 = _iterator5.n()).done) {\n                _context4.next = 55;\n                break;\n              }\n              callback = _step5.value;\n              _context4.next = 53;\n              return callback({\n                cacheName: cacheName,\n                oldResponse: oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event\n              });\n            case 53:\n              _context4.next = 49;\n              break;\n            case 55:\n              _context4.next = 60;\n              break;\n            case 57:\n              _context4.prev = 57;\n              _context4.t2 = _context4[\"catch\"](47);\n              _iterator5.e(_context4.t2);\n            case 60:\n              _context4.prev = 60;\n              _iterator5.f();\n              return _context4.finish(60);\n            case 63:\n              return _context4.abrupt(\"return\", true);\n            case 64:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[34, 39], [47, 57, 60, 63]]);\n      }));\n      function cachePut(_x5, _x6) {\n        return _cachePut.apply(this, arguments);\n      }\n      return cachePut;\n    }()\n    /**\r\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\r\n     * executes any of those callbacks found in sequence. The final `Request`\r\n     * object returned by the last plugin is treated as the cache key for cache\r\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\r\n     * been registered, the passed request is returned unmodified\r\n     *\r\n     * @param {Request} request\r\n     * @param {string} mode\r\n     * @return {Promise<Request>}\r\n     */\n  }, {\n    key: \"getCacheKey\",\n    value: function () {\n      var _getCacheKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(request, mode) {\n        var key, effectiveRequest, _iterator6, _step6, callback;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              key = \"\".concat(request.url, \" | \").concat(mode);\n              if (this._cacheKeys[key]) {\n                _context5.next = 24;\n                break;\n              }\n              effectiveRequest = request;\n              _iterator6 = _createForOfIteratorHelper(this.iterateCallbacks('cacheKeyWillBeUsed'));\n              _context5.prev = 4;\n              _iterator6.s();\n            case 6:\n              if ((_step6 = _iterator6.n()).done) {\n                _context5.next = 15;\n                break;\n              }\n              callback = _step6.value;\n              _context5.t0 = toRequest;\n              _context5.next = 11;\n              return callback({\n                mode: mode,\n                request: effectiveRequest,\n                event: this.event,\n                // params has a type any can't change right now.\n                params: this.params // eslint-disable-line\n              });\n            case 11:\n              _context5.t1 = _context5.sent;\n              effectiveRequest = (0, _context5.t0)(_context5.t1);\n            case 13:\n              _context5.next = 6;\n              break;\n            case 15:\n              _context5.next = 20;\n              break;\n            case 17:\n              _context5.prev = 17;\n              _context5.t2 = _context5[\"catch\"](4);\n              _iterator6.e(_context5.t2);\n            case 20:\n              _context5.prev = 20;\n              _iterator6.f();\n              return _context5.finish(20);\n            case 23:\n              this._cacheKeys[key] = effectiveRequest;\n            case 24:\n              return _context5.abrupt(\"return\", this._cacheKeys[key]);\n            case 25:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[4, 17, 20, 23]]);\n      }));\n      function getCacheKey(_x7, _x8) {\n        return _getCacheKey.apply(this, arguments);\n      }\n      return getCacheKey;\n    }()\n    /**\r\n     * Returns true if the strategy has at least one plugin with the given\r\n     * callback.\r\n     *\r\n     * @param {string} name The name of the callback to check for.\r\n     * @return {boolean}\r\n     */\n  }, {\n    key: \"hasCallback\",\n    value: function hasCallback(name) {\n      var _iterator7 = _createForOfIteratorHelper(this._strategy.plugins),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var plugin = _step7.value;\n          if (name in plugin) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      return false;\n    }\n    /**\r\n     * Runs all plugin callbacks matching the given name, in order, passing the\r\n     * given param object (merged ith the current plugin state) as the only\r\n     * argument.\r\n     *\r\n     * Note: since this method runs all plugins, it's not suitable for cases\r\n     * where the return value of a callback needs to be applied prior to calling\r\n     * the next callback. See\r\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\r\n     * below for how to handle that case.\r\n     *\r\n     * @param {string} name The name of the callback to run within each plugin.\r\n     * @param {Object} param The object to pass as the first (and only) param\r\n     *     when executing each callback. This object will be merged with the\r\n     *     current plugin state prior to callback execution.\r\n     */\n  }, {\n    key: \"runCallbacks\",\n    value: function () {\n      var _runCallbacks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(name, param) {\n        var _iterator8, _step8, callback;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _iterator8 = _createForOfIteratorHelper(this.iterateCallbacks(name));\n              _context6.prev = 1;\n              _iterator8.s();\n            case 3:\n              if ((_step8 = _iterator8.n()).done) {\n                _context6.next = 9;\n                break;\n              }\n              callback = _step8.value;\n              _context6.next = 7;\n              return callback(param);\n            case 7:\n              _context6.next = 3;\n              break;\n            case 9:\n              _context6.next = 14;\n              break;\n            case 11:\n              _context6.prev = 11;\n              _context6.t0 = _context6[\"catch\"](1);\n              _iterator8.e(_context6.t0);\n            case 14:\n              _context6.prev = 14;\n              _iterator8.f();\n              return _context6.finish(14);\n            case 17:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this, [[1, 11, 14, 17]]);\n      }));\n      function runCallbacks(_x9, _x10) {\n        return _runCallbacks.apply(this, arguments);\n      }\n      return runCallbacks;\n    }()\n    /**\r\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\r\n     * where each callback is wrapped with the current handler state (i.e. when\r\n     * you call each callback, whatever object parameter you pass it will\r\n     * be merged with the plugin's current state).\r\n     *\r\n     * @param {string} name The name fo the callback to run\r\n     * @return {Array<Function>}\r\n     */\n  }, {\n    key: \"iterateCallbacks\",\n    value:\n    /*#__PURE__*/\n    _regeneratorRuntime().mark(function iterateCallbacks(name) {\n      var _this = this;\n      var _iterator9, _step9, _loop;\n      return _regeneratorRuntime().wrap(function iterateCallbacks$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            _iterator9 = _createForOfIteratorHelper(this._strategy.plugins);\n            _context8.prev = 1;\n            _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n              var plugin, state, statefulCallback;\n              return _regeneratorRuntime().wrap(function _loop$(_context7) {\n                while (1) switch (_context7.prev = _context7.next) {\n                  case 0:\n                    plugin = _step9.value;\n                    if (!(typeof plugin[name] === 'function')) {\n                      _context7.next = 6;\n                      break;\n                    }\n                    state = _this._pluginStateMap.get(plugin);\n                    statefulCallback = function statefulCallback(param) {\n                      var statefulParam = Object.assign(Object.assign({}, param), {\n                        state: state\n                      });\n                      // TODO(philipwalton): not sure why `any` is needed. It seems like\n                      // this should work with `as WorkboxPluginCallbackParam[C]`.\n                      return plugin[name](statefulParam);\n                    };\n                    _context7.next = 6;\n                    return statefulCallback;\n                  case 6:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }, _loop);\n            });\n            _iterator9.s();\n          case 4:\n            if ((_step9 = _iterator9.n()).done) {\n              _context8.next = 8;\n              break;\n            }\n            return _context8.delegateYield(_loop(), \"t0\", 6);\n          case 6:\n            _context8.next = 4;\n            break;\n          case 8:\n            _context8.next = 13;\n            break;\n          case 10:\n            _context8.prev = 10;\n            _context8.t1 = _context8[\"catch\"](1);\n            _iterator9.e(_context8.t1);\n          case 13:\n            _context8.prev = 13;\n            _iterator9.f();\n            return _context8.finish(13);\n          case 16:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, iterateCallbacks, this, [[1, 10, 13, 16]]);\n    })\n    /**\r\n     * Adds a promise to the\r\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\r\n     * of the event event associated with the request being handled (usually a\r\n     * `FetchEvent`).\r\n     *\r\n     * Note: you can await\r\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\r\n     * to know when all added promises have settled.\r\n     *\r\n     * @param {Promise} promise A promise to add to the extend lifetime promises\r\n     *     of the event that triggered the request.\r\n     */\n  }, {\n    key: \"waitUntil\",\n    value: function waitUntil(promise) {\n      this._extendLifetimePromises.push(promise);\n      return promise;\n    }\n    /**\r\n     * Returns a promise that resolves once all promises passed to\r\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\r\n     * have settled.\r\n     *\r\n     * Note: any work done after `doneWaiting()` settles should be manually\r\n     * passed to an event's `waitUntil()` method (not this handler's\r\n     * `waitUntil()` method), otherwise the service worker thread my be killed\r\n     * prior to your work completing.\r\n     */\n  }, {\n    key: \"doneWaiting\",\n    value: function () {\n      var _doneWaiting = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var promise;\n        return _regeneratorRuntime().wrap(function _callee7$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              if (!(promise = this._extendLifetimePromises.shift())) {\n                _context9.next = 5;\n                break;\n              }\n              _context9.next = 3;\n              return promise;\n            case 3:\n              _context9.next = 0;\n              break;\n            case 5:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee7, this);\n      }));\n      function doneWaiting() {\n        return _doneWaiting.apply(this, arguments);\n      }\n      return doneWaiting;\n    }()\n    /**\r\n     * Stops running the strategy and immediately resolves any pending\r\n     * `waitUntil()` promises.\r\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._handlerDeferred.resolve(null);\n    }\n    /**\r\n     * This method will call cacheWillUpdate on the available plugins (or use\r\n     * status === 200) to determine if the Response is safe and valid to cache.\r\n     *\r\n     * @param {Request} options.request\r\n     * @param {Response} options.response\r\n     * @return {Promise<Response|undefined>}\r\n     *\r\n     * @private\r\n     */\n  }, {\n    key: \"_ensureResponseSafeToCache\",\n    value: function () {\n      var _ensureResponseSafeToCache2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(response) {\n        var responseToCache, pluginsUsed, _iterator10, _step10, callback;\n        return _regeneratorRuntime().wrap(function _callee8$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              responseToCache = response;\n              pluginsUsed = false;\n              _iterator10 = _createForOfIteratorHelper(this.iterateCallbacks('cacheWillUpdate'));\n              _context10.prev = 3;\n              _iterator10.s();\n            case 5:\n              if ((_step10 = _iterator10.n()).done) {\n                _context10.next = 18;\n                break;\n              }\n              callback = _step10.value;\n              _context10.next = 9;\n              return callback({\n                request: this.request,\n                response: responseToCache,\n                event: this.event\n              });\n            case 9:\n              _context10.t0 = _context10.sent;\n              if (_context10.t0) {\n                _context10.next = 12;\n                break;\n              }\n              _context10.t0 = undefined;\n            case 12:\n              responseToCache = _context10.t0;\n              pluginsUsed = true;\n              if (responseToCache) {\n                _context10.next = 16;\n                break;\n              }\n              return _context10.abrupt(\"break\", 18);\n            case 16:\n              _context10.next = 5;\n              break;\n            case 18:\n              _context10.next = 23;\n              break;\n            case 20:\n              _context10.prev = 20;\n              _context10.t1 = _context10[\"catch\"](3);\n              _iterator10.e(_context10.t1);\n            case 23:\n              _context10.prev = 23;\n              _iterator10.f();\n              return _context10.finish(23);\n            case 26:\n              if (!pluginsUsed) {\n                if (responseToCache && responseToCache.status !== 200) {\n                  responseToCache = undefined;\n                }\n                if (process.env.NODE_ENV !== 'production') {\n                  if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                      if (responseToCache.status === 0) {\n                        logger.warn(\"The response for '\".concat(this.request.url, \"' \") + \"is an opaque response. The caching strategy that you're \" + \"using will not cache opaque responses by default.\");\n                      } else {\n                        logger.debug(\"The response for '\".concat(this.request.url, \"' \") + \"returned a status code of '\".concat(response.status, \"' and won't \") + \"be cached as a result.\");\n                      }\n                    }\n                  }\n                }\n              }\n              return _context10.abrupt(\"return\", responseToCache);\n            case 28:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee8, this, [[3, 20, 23, 26]]);\n      }));\n      function _ensureResponseSafeToCache(_x11) {\n        return _ensureResponseSafeToCache2.apply(this, arguments);\n      }\n      return _ensureResponseSafeToCache;\n    }()\n  }]);\n  return StrategyHandler;\n}();\nexport { StrategyHandler };","map":{"version":3,"names":["assert","cacheMatchIgnoreParams","Deferred","executeQuotaErrorCallbacks","getFriendlyURL","logger","timeout","WorkboxError","toRequest","input","Request","StrategyHandler","strategy","options","_cacheKeys","process","env","NODE_ENV","isInstance","event","ExtendableEvent","moduleName","className","funcName","paramName","Object","assign","_strategy","_handlerDeferred","_extendLifetimePromises","_plugins","plugins","_pluginStateMap","Map","plugin","set","waitUntil","promise","request","mode","FetchEvent","preloadResponse","possiblePreloadResponse","log","url","originalRequest","hasCallback","clone","iterateCallbacks","cb","Error","thrownErrorMessage","message","pluginFilteredRequest","fetch","undefined","fetchOptions","fetchResponse","debug","status","callback","response","runCallbacks","error","responseClone","cachePut","key","cacheName","matchOptions","getCacheKey","effectiveRequest","multiMatchOptions","caches","match","cachedResponse","method","vary","headers","get","_ensureResponseSafeToCache","responseToCache","self","open","cache","hasCacheUpdateCallback","oldResponse","put","name","newResponse","params","param","state","statefulCallback","statefulParam","push","shift","resolve","pluginsUsed","warn"],"sources":["D:/github/music-pwa-frontend/node_modules/workbox-strategies/StrategyHandler.js"],"sourcesContent":["/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\r\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\r\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { timeout } from 'workbox-core/_private/timeout.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport './_version.js';\r\nfunction toRequest(input) {\r\n    return typeof input === 'string' ? new Request(input) : input;\r\n}\r\n/**\r\n * A class created every time a Strategy instance instance calls\r\n * {@link workbox-strategies.Strategy~handle} or\r\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\r\n * cache actions around plugin callbacks and keeps track of when the strategy\r\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\r\n *\r\n * @memberof workbox-strategies\r\n */\r\nclass StrategyHandler {\r\n    /**\r\n     * Creates a new instance associated with the passed strategy and event\r\n     * that's handling the request.\r\n     *\r\n     * The constructor also initializes the state that will be passed to each of\r\n     * the plugins handling this request.\r\n     *\r\n     * @param {workbox-strategies.Strategy} strategy\r\n     * @param {Object} options\r\n     * @param {Request|string} options.request A request to run this strategy for.\r\n     * @param {ExtendableEvent} options.event The event associated with the\r\n     *     request.\r\n     * @param {URL} [options.url]\r\n     * @param {*} [options.params] The return value from the\r\n     *     {@link workbox-routing~matchCallback} (if applicable).\r\n     */\r\n    constructor(strategy, options) {\r\n        this._cacheKeys = {};\r\n        /**\r\n         * The request the strategy is performing (passed to the strategy's\r\n         * `handle()` or `handleAll()` method).\r\n         * @name request\r\n         * @instance\r\n         * @type {Request}\r\n         * @memberof workbox-strategies.StrategyHandler\r\n         */\r\n        /**\r\n         * The event associated with this request.\r\n         * @name event\r\n         * @instance\r\n         * @type {ExtendableEvent}\r\n         * @memberof workbox-strategies.StrategyHandler\r\n         */\r\n        /**\r\n         * A `URL` instance of `request.url` (if passed to the strategy's\r\n         * `handle()` or `handleAll()` method).\r\n         * Note: the `url` param will be present if the strategy was invoked\r\n         * from a workbox `Route` object.\r\n         * @name url\r\n         * @instance\r\n         * @type {URL|undefined}\r\n         * @memberof workbox-strategies.StrategyHandler\r\n         */\r\n        /**\r\n         * A `param` value (if passed to the strategy's\r\n         * `handle()` or `handleAll()` method).\r\n         * Note: the `param` param will be present if the strategy was invoked\r\n         * from a workbox `Route` object and the\r\n         * {@link workbox-routing~matchCallback} returned\r\n         * a truthy value (it will be that value).\r\n         * @name params\r\n         * @instance\r\n         * @type {*|undefined}\r\n         * @memberof workbox-strategies.StrategyHandler\r\n         */\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(options.event, ExtendableEvent, {\r\n                moduleName: 'workbox-strategies',\r\n                className: 'StrategyHandler',\r\n                funcName: 'constructor',\r\n                paramName: 'options.event',\r\n            });\r\n        }\r\n        Object.assign(this, options);\r\n        this.event = options.event;\r\n        this._strategy = strategy;\r\n        this._handlerDeferred = new Deferred();\r\n        this._extendLifetimePromises = [];\r\n        // Copy the plugins list (since it's mutable on the strategy),\r\n        // so any mutations don't affect this handler instance.\r\n        this._plugins = [...strategy.plugins];\r\n        this._pluginStateMap = new Map();\r\n        for (const plugin of this._plugins) {\r\n            this._pluginStateMap.set(plugin, {});\r\n        }\r\n        this.event.waitUntil(this._handlerDeferred.promise);\r\n    }\r\n    /**\r\n     * Fetches a given request (and invokes any applicable plugin callback\r\n     * methods) using the `fetchOptions` (for non-navigation requests) and\r\n     * `plugins` defined on the `Strategy` object.\r\n     *\r\n     * The following plugin lifecycle methods are invoked when using this method:\r\n     * - `requestWillFetch()`\r\n     * - `fetchDidSucceed()`\r\n     * - `fetchDidFail()`\r\n     *\r\n     * @param {Request|string} input The URL or request to fetch.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async fetch(input) {\r\n        const { event } = this;\r\n        let request = toRequest(input);\r\n        if (request.mode === 'navigate' &&\r\n            event instanceof FetchEvent &&\r\n            event.preloadResponse) {\r\n            const possiblePreloadResponse = (await event.preloadResponse);\r\n            if (possiblePreloadResponse) {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    logger.log(`Using a preloaded navigation response for ` +\r\n                        `'${getFriendlyURL(request.url)}'`);\r\n                }\r\n                return possiblePreloadResponse;\r\n            }\r\n        }\r\n        // If there is a fetchDidFail plugin, we need to save a clone of the\r\n        // original request before it's either modified by a requestWillFetch\r\n        // plugin or before the original request's body is consumed via fetch().\r\n        const originalRequest = this.hasCallback('fetchDidFail')\r\n            ? request.clone()\r\n            : null;\r\n        try {\r\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\r\n                request = await cb({ request: request.clone(), event });\r\n            }\r\n        }\r\n        catch (err) {\r\n            if (err instanceof Error) {\r\n                throw new WorkboxError('plugin-error-request-will-fetch', {\r\n                    thrownErrorMessage: err.message,\r\n                });\r\n            }\r\n        }\r\n        // The request can be altered by plugins with `requestWillFetch` making\r\n        // the original request (most likely from a `fetch` event) different\r\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\r\n        const pluginFilteredRequest = request.clone();\r\n        try {\r\n            let fetchResponse;\r\n            // See https://github.com/GoogleChrome/workbox/issues/1796\r\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.debug(`Network request for ` +\r\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\r\n                    `status '${fetchResponse.status}'.`);\r\n            }\r\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\r\n                fetchResponse = await callback({\r\n                    event,\r\n                    request: pluginFilteredRequest,\r\n                    response: fetchResponse,\r\n                });\r\n            }\r\n            return fetchResponse;\r\n        }\r\n        catch (error) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.log(`Network request for ` +\r\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\r\n            }\r\n            // `originalRequest` will only exist if a `fetchDidFail` callback\r\n            // is being used (see above).\r\n            if (originalRequest) {\r\n                await this.runCallbacks('fetchDidFail', {\r\n                    error: error,\r\n                    event,\r\n                    originalRequest: originalRequest.clone(),\r\n                    request: pluginFilteredRequest.clone(),\r\n                });\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\r\n     * the response generated by `this.fetch()`.\r\n     *\r\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\r\n     * so you do not have to manually call `waitUntil()` on the event.\r\n     *\r\n     * @param {Request|string} input The request or URL to fetch and cache.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async fetchAndCachePut(input) {\r\n        const response = await this.fetch(input);\r\n        const responseClone = response.clone();\r\n        void this.waitUntil(this.cachePut(input, responseClone));\r\n        return response;\r\n    }\r\n    /**\r\n     * Matches a request from the cache (and invokes any applicable plugin\r\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\r\n     * defined on the strategy object.\r\n     *\r\n     * The following plugin lifecycle methods are invoked when using this method:\r\n     * - cacheKeyWillByUsed()\r\n     * - cachedResponseWillByUsed()\r\n     *\r\n     * @param {Request|string} key The Request or URL to use as the cache key.\r\n     * @return {Promise<Response|undefined>} A matching response, if found.\r\n     */\r\n    async cacheMatch(key) {\r\n        const request = toRequest(key);\r\n        let cachedResponse;\r\n        const { cacheName, matchOptions } = this._strategy;\r\n        const effectiveRequest = await this.getCacheKey(request, 'read');\r\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\r\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (cachedResponse) {\r\n                logger.debug(`Found a cached response in '${cacheName}'.`);\r\n            }\r\n            else {\r\n                logger.debug(`No cached response found in '${cacheName}'.`);\r\n            }\r\n        }\r\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\r\n            cachedResponse =\r\n                (await callback({\r\n                    cacheName,\r\n                    matchOptions,\r\n                    cachedResponse,\r\n                    request: effectiveRequest,\r\n                    event: this.event,\r\n                })) || undefined;\r\n        }\r\n        return cachedResponse;\r\n    }\r\n    /**\r\n     * Puts a request/response pair in the cache (and invokes any applicable\r\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\r\n     * the strategy object.\r\n     *\r\n     * The following plugin lifecycle methods are invoked when using this method:\r\n     * - cacheKeyWillByUsed()\r\n     * - cacheWillUpdate()\r\n     * - cacheDidUpdate()\r\n     *\r\n     * @param {Request|string} key The request or URL to use as the cache key.\r\n     * @param {Response} response The response to cache.\r\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\r\n     * not be cached, and `true` otherwise.\r\n     */\r\n    async cachePut(key, response) {\r\n        const request = toRequest(key);\r\n        // Run in the next task to avoid blocking other cache reads.\r\n        // https://github.com/w3c/ServiceWorker/issues/1397\r\n        await timeout(0);\r\n        const effectiveRequest = await this.getCacheKey(request, 'write');\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\r\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\r\n                    url: getFriendlyURL(effectiveRequest.url),\r\n                    method: effectiveRequest.method,\r\n                });\r\n            }\r\n            // See https://github.com/GoogleChrome/workbox/issues/2818\r\n            const vary = response.headers.get('Vary');\r\n            if (vary) {\r\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\r\n                    `has a 'Vary: ${vary}' header. ` +\r\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\r\n                    `to ensure cache matching and deletion works as expected.`);\r\n            }\r\n        }\r\n        if (!response) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.error(`Cannot cache non-existent response for ` +\r\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\r\n            }\r\n            throw new WorkboxError('cache-put-with-no-response', {\r\n                url: getFriendlyURL(effectiveRequest.url),\r\n            });\r\n        }\r\n        const responseToCache = await this._ensureResponseSafeToCache(response);\r\n        if (!responseToCache) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\r\n                    `will not be cached.`, responseToCache);\r\n            }\r\n            return false;\r\n        }\r\n        const { cacheName, matchOptions } = this._strategy;\r\n        const cache = await self.caches.open(cacheName);\r\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\r\n        const oldResponse = hasCacheUpdateCallback\r\n            ? await cacheMatchIgnoreParams(\r\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\r\n            // feature. Consider into ways to only add this behavior if using\r\n            // precaching.\r\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\r\n            : null;\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\r\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\r\n        }\r\n        try {\r\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\r\n        }\r\n        catch (error) {\r\n            if (error instanceof Error) {\r\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\r\n                if (error.name === 'QuotaExceededError') {\r\n                    await executeQuotaErrorCallbacks();\r\n                }\r\n                throw error;\r\n            }\r\n        }\r\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\r\n            await callback({\r\n                cacheName,\r\n                oldResponse,\r\n                newResponse: responseToCache.clone(),\r\n                request: effectiveRequest,\r\n                event: this.event,\r\n            });\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\r\n     * executes any of those callbacks found in sequence. The final `Request`\r\n     * object returned by the last plugin is treated as the cache key for cache\r\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\r\n     * been registered, the passed request is returned unmodified\r\n     *\r\n     * @param {Request} request\r\n     * @param {string} mode\r\n     * @return {Promise<Request>}\r\n     */\r\n    async getCacheKey(request, mode) {\r\n        const key = `${request.url} | ${mode}`;\r\n        if (!this._cacheKeys[key]) {\r\n            let effectiveRequest = request;\r\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\r\n                effectiveRequest = toRequest(await callback({\r\n                    mode,\r\n                    request: effectiveRequest,\r\n                    event: this.event,\r\n                    // params has a type any can't change right now.\r\n                    params: this.params, // eslint-disable-line\r\n                }));\r\n            }\r\n            this._cacheKeys[key] = effectiveRequest;\r\n        }\r\n        return this._cacheKeys[key];\r\n    }\r\n    /**\r\n     * Returns true if the strategy has at least one plugin with the given\r\n     * callback.\r\n     *\r\n     * @param {string} name The name of the callback to check for.\r\n     * @return {boolean}\r\n     */\r\n    hasCallback(name) {\r\n        for (const plugin of this._strategy.plugins) {\r\n            if (name in plugin) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Runs all plugin callbacks matching the given name, in order, passing the\r\n     * given param object (merged ith the current plugin state) as the only\r\n     * argument.\r\n     *\r\n     * Note: since this method runs all plugins, it's not suitable for cases\r\n     * where the return value of a callback needs to be applied prior to calling\r\n     * the next callback. See\r\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\r\n     * below for how to handle that case.\r\n     *\r\n     * @param {string} name The name of the callback to run within each plugin.\r\n     * @param {Object} param The object to pass as the first (and only) param\r\n     *     when executing each callback. This object will be merged with the\r\n     *     current plugin state prior to callback execution.\r\n     */\r\n    async runCallbacks(name, param) {\r\n        for (const callback of this.iterateCallbacks(name)) {\r\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\r\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\r\n            await callback(param);\r\n        }\r\n    }\r\n    /**\r\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\r\n     * where each callback is wrapped with the current handler state (i.e. when\r\n     * you call each callback, whatever object parameter you pass it will\r\n     * be merged with the plugin's current state).\r\n     *\r\n     * @param {string} name The name fo the callback to run\r\n     * @return {Array<Function>}\r\n     */\r\n    *iterateCallbacks(name) {\r\n        for (const plugin of this._strategy.plugins) {\r\n            if (typeof plugin[name] === 'function') {\r\n                const state = this._pluginStateMap.get(plugin);\r\n                const statefulCallback = (param) => {\r\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\r\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\r\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\r\n                    return plugin[name](statefulParam);\r\n                };\r\n                yield statefulCallback;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Adds a promise to the\r\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\r\n     * of the event event associated with the request being handled (usually a\r\n     * `FetchEvent`).\r\n     *\r\n     * Note: you can await\r\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\r\n     * to know when all added promises have settled.\r\n     *\r\n     * @param {Promise} promise A promise to add to the extend lifetime promises\r\n     *     of the event that triggered the request.\r\n     */\r\n    waitUntil(promise) {\r\n        this._extendLifetimePromises.push(promise);\r\n        return promise;\r\n    }\r\n    /**\r\n     * Returns a promise that resolves once all promises passed to\r\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\r\n     * have settled.\r\n     *\r\n     * Note: any work done after `doneWaiting()` settles should be manually\r\n     * passed to an event's `waitUntil()` method (not this handler's\r\n     * `waitUntil()` method), otherwise the service worker thread my be killed\r\n     * prior to your work completing.\r\n     */\r\n    async doneWaiting() {\r\n        let promise;\r\n        while ((promise = this._extendLifetimePromises.shift())) {\r\n            await promise;\r\n        }\r\n    }\r\n    /**\r\n     * Stops running the strategy and immediately resolves any pending\r\n     * `waitUntil()` promises.\r\n     */\r\n    destroy() {\r\n        this._handlerDeferred.resolve(null);\r\n    }\r\n    /**\r\n     * This method will call cacheWillUpdate on the available plugins (or use\r\n     * status === 200) to determine if the Response is safe and valid to cache.\r\n     *\r\n     * @param {Request} options.request\r\n     * @param {Response} options.response\r\n     * @return {Promise<Response|undefined>}\r\n     *\r\n     * @private\r\n     */\r\n    async _ensureResponseSafeToCache(response) {\r\n        let responseToCache = response;\r\n        let pluginsUsed = false;\r\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\r\n            responseToCache =\r\n                (await callback({\r\n                    request: this.request,\r\n                    response: responseToCache,\r\n                    event: this.event,\r\n                })) || undefined;\r\n            pluginsUsed = true;\r\n            if (!responseToCache) {\r\n                break;\r\n            }\r\n        }\r\n        if (!pluginsUsed) {\r\n            if (responseToCache && responseToCache.status !== 200) {\r\n                responseToCache = undefined;\r\n            }\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                if (responseToCache) {\r\n                    if (responseToCache.status !== 200) {\r\n                        if (responseToCache.status === 0) {\r\n                            logger.warn(`The response for '${this.request.url}' ` +\r\n                                `is an opaque response. The caching strategy that you're ` +\r\n                                `using will not cache opaque responses by default.`);\r\n                        }\r\n                        else {\r\n                            logger.debug(`The response for '${this.request.url}' ` +\r\n                                `returned a status code of '${response.status}' and won't ` +\r\n                                `be cached as a result.`);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return responseToCache;\r\n    }\r\n}\r\nexport { StrategyHandler };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}