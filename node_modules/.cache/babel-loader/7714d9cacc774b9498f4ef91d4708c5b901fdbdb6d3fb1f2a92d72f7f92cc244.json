{"ast":null,"code":"import _createClass from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\r\n * RegExpRoute makes it easy to create a regular expression based\r\n * {@link workbox-routing.Route}.\r\n *\r\n * For same-origin requests the RegExp only needs to match part of the URL. For\r\n * requests against third-party servers, you must define a RegExp that matches\r\n * the start of the URL.\r\n *\r\n * @memberof workbox-routing\r\n * @extends workbox-routing.Route\r\n */\nvar RegExpRoute = /*#__PURE__*/function (_Route) {\n  _inherits(RegExpRoute, _Route);\n  var _super = _createSuper(RegExpRoute);\n  /**\r\n   * If the regular expression contains\r\n   * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\r\n   * the captured values will be passed to the\r\n   * {@link workbox-routing~handlerCallback} `params`\r\n   * argument.\r\n   *\r\n   * @param {RegExp} regExp The regular expression to match against URLs.\r\n   * @param {workbox-routing~handlerCallback} handler A callback\r\n   * function that returns a Promise resulting in a Response.\r\n   * @param {string} [method='GET'] The HTTP method to match the Route\r\n   * against.\r\n   */\n  function RegExpRoute(regExp, handler, method) {\n    _classCallCheck(this, RegExpRoute);\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(regExp, RegExp, {\n        moduleName: 'workbox-routing',\n        className: 'RegExpRoute',\n        funcName: 'constructor',\n        paramName: 'pattern'\n      });\n    }\n    var match = function match(_ref) {\n      var url = _ref.url;\n      var result = regExp.exec(url.href);\n      // Return immediately if there's no match.\n      if (!result) {\n        return;\n      }\n      // Require that the match start at the first character in the URL string\n      // if it's a cross-origin request.\n      // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n      // behind this behavior.\n      if (url.origin !== location.origin && result.index !== 0) {\n        if (process.env.NODE_ENV !== 'production') {\n          logger.debug(\"The regular expression '\".concat(regExp.toString(), \"' only partially matched \") + \"against the cross-origin URL '\".concat(url.toString(), \"'. RegExpRoute's will only \") + \"handle cross-origin requests if they match the entire URL.\");\n        }\n        return;\n      }\n      // If the route matches, but there aren't any capture groups defined, then\n      // this will return [], which is truthy and therefore sufficient to\n      // indicate a match.\n      // If there are capture groups, then it will return their values.\n      return result.slice(1);\n    };\n    return _super.call(this, match, handler, method);\n  }\n  return _createClass(RegExpRoute);\n}(Route);\nexport { RegExpRoute };","map":{"version":3,"names":["assert","logger","Route","RegExpRoute","regExp","handler","method","process","env","NODE_ENV","isInstance","RegExp","moduleName","className","funcName","paramName","match","url","result","exec","href","origin","location","index","debug","toString","slice"],"sources":["D:/github/music-pwa-frontend/node_modules/workbox-routing/RegExpRoute.js"],"sourcesContent":["/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { Route } from './Route.js';\r\nimport './_version.js';\r\n/**\r\n * RegExpRoute makes it easy to create a regular expression based\r\n * {@link workbox-routing.Route}.\r\n *\r\n * For same-origin requests the RegExp only needs to match part of the URL. For\r\n * requests against third-party servers, you must define a RegExp that matches\r\n * the start of the URL.\r\n *\r\n * @memberof workbox-routing\r\n * @extends workbox-routing.Route\r\n */\r\nclass RegExpRoute extends Route {\r\n    /**\r\n     * If the regular expression contains\r\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\r\n     * the captured values will be passed to the\r\n     * {@link workbox-routing~handlerCallback} `params`\r\n     * argument.\r\n     *\r\n     * @param {RegExp} regExp The regular expression to match against URLs.\r\n     * @param {workbox-routing~handlerCallback} handler A callback\r\n     * function that returns a Promise resulting in a Response.\r\n     * @param {string} [method='GET'] The HTTP method to match the Route\r\n     * against.\r\n     */\r\n    constructor(regExp, handler, method) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(regExp, RegExp, {\r\n                moduleName: 'workbox-routing',\r\n                className: 'RegExpRoute',\r\n                funcName: 'constructor',\r\n                paramName: 'pattern',\r\n            });\r\n        }\r\n        const match = ({ url }) => {\r\n            const result = regExp.exec(url.href);\r\n            // Return immediately if there's no match.\r\n            if (!result) {\r\n                return;\r\n            }\r\n            // Require that the match start at the first character in the URL string\r\n            // if it's a cross-origin request.\r\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\r\n            // behind this behavior.\r\n            if (url.origin !== location.origin && result.index !== 0) {\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\r\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\r\n                        `handle cross-origin requests if they match the entire URL.`);\r\n                }\r\n                return;\r\n            }\r\n            // If the route matches, but there aren't any capture groups defined, then\r\n            // this will return [], which is truthy and therefore sufficient to\r\n            // indicate a match.\r\n            // If there are capture groups, then it will return their values.\r\n            return result.slice(1);\r\n        };\r\n        super(match, handler, method);\r\n    }\r\n}\r\nexport { RegExpRoute };\r\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,iCAAiC;AACxD,SAASC,MAAM,QAAQ,iCAAiC;AACxD,SAASC,KAAK,QAAQ,YAAY;AAClC,OAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA,IAWMC,WAAW;EAAA;EAAA;EACb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,qBAAYC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAAE;IAAA;IACjC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvCT,MAAM,CAACU,UAAU,CAACN,MAAM,EAAEO,MAAM,EAAE;QAC9BC,UAAU,EAAE,iBAAiB;QAC7BC,SAAS,EAAE,aAAa;QACxBC,QAAQ,EAAE,aAAa;QACvBC,SAAS,EAAE;MACf,CAAC,CAAC;IACN;IACA,IAAMC,KAAK,GAAG,SAARA,KAAK,OAAgB;MAAA,IAAVC,GAAG,QAAHA,GAAG;MAChB,IAAMC,MAAM,GAAGd,MAAM,CAACe,IAAI,CAACF,GAAG,CAACG,IAAI,CAAC;MACpC;MACA,IAAI,CAACF,MAAM,EAAE;QACT;MACJ;MACA;MACA;MACA;MACA;MACA,IAAID,GAAG,CAACI,MAAM,KAAKC,QAAQ,CAACD,MAAM,IAAIH,MAAM,CAACK,KAAK,KAAK,CAAC,EAAE;QACtD,IAAIhB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;UACvCR,MAAM,CAACuB,KAAK,CAAC,kCAA2BpB,MAAM,CAACqB,QAAQ,EAAE,yEACpBR,GAAG,CAACQ,QAAQ,EAAE,gCAA6B,+DAChB,CAAC;QACrE;QACA;MACJ;MACA;MACA;MACA;MACA;MACA,OAAOP,MAAM,CAACQ,KAAK,CAAC,CAAC,CAAC;IAC1B,CAAC;IAAC,yBACIV,KAAK,EAAEX,OAAO,EAAEC,MAAM;EAChC;EAAC;AAAA,EAhDqBJ,KAAK;AAkD/B,SAASC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}