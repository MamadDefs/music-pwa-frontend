{"ast":null,"code":"import _regeneratorRuntime from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\r\n * Generator function that yields possible variations on the original URL to\r\n * check, one at a time.\r\n *\r\n * @param {string} url\r\n * @param {Object} options\r\n *\r\n * @private\r\n * @memberof workbox-precaching\r\n */\nexport function generateURLVariations(url) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$ignoreURLParamet = _ref.ignoreURLParametersMatching,\n    ignoreURLParametersMatching = _ref$ignoreURLParamet === void 0 ? [/^utm_/, /^fbclid$/] : _ref$ignoreURLParamet,\n    _ref$directoryIndex = _ref.directoryIndex,\n    directoryIndex = _ref$directoryIndex === void 0 ? 'index.html' : _ref$directoryIndex,\n    _ref$cleanURLs = _ref.cleanURLs,\n    cleanURLs = _ref$cleanURLs === void 0 ? true : _ref$cleanURLs,\n    urlManipulation = _ref.urlManipulation;\n  return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var urlObject, urlWithoutIgnoredParams, directoryURL, cleanURL, additionalURLs, _iterator, _step, urlToAttempt;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          urlObject = new URL(url, location.href);\n          urlObject.hash = '';\n          _context.next = 4;\n          return urlObject.href;\n        case 4:\n          urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n          _context.next = 7;\n          return urlWithoutIgnoredParams.href;\n        case 7:\n          if (!(directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/'))) {\n            _context.next = 12;\n            break;\n          }\n          directoryURL = new URL(urlWithoutIgnoredParams.href);\n          directoryURL.pathname += directoryIndex;\n          _context.next = 12;\n          return directoryURL.href;\n        case 12:\n          if (!cleanURLs) {\n            _context.next = 17;\n            break;\n          }\n          cleanURL = new URL(urlWithoutIgnoredParams.href);\n          cleanURL.pathname += '.html';\n          _context.next = 17;\n          return cleanURL.href;\n        case 17:\n          if (!urlManipulation) {\n            _context.next = 36;\n            break;\n          }\n          additionalURLs = urlManipulation({\n            url: urlObject\n          });\n          _iterator = _createForOfIteratorHelper(additionalURLs);\n          _context.prev = 20;\n          _iterator.s();\n        case 22:\n          if ((_step = _iterator.n()).done) {\n            _context.next = 28;\n            break;\n          }\n          urlToAttempt = _step.value;\n          _context.next = 26;\n          return urlToAttempt.href;\n        case 26:\n          _context.next = 22;\n          break;\n        case 28:\n          _context.next = 33;\n          break;\n        case 30:\n          _context.prev = 30;\n          _context.t0 = _context[\"catch\"](20);\n          _iterator.e(_context.t0);\n        case 33:\n          _context.prev = 33;\n          _iterator.f();\n          return _context.finish(33);\n        case 36:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[20, 30, 33, 36]]);\n  })();\n}","map":{"version":3,"names":["removeIgnoredSearchParams","generateURLVariations","url","ignoreURLParametersMatching","directoryIndex","cleanURLs","urlManipulation","urlObject","URL","location","href","hash","urlWithoutIgnoredParams","pathname","endsWith","directoryURL","cleanURL","additionalURLs","urlToAttempt"],"sources":["D:/github/music-pwa-frontend/node_modules/workbox-precaching/utils/generateURLVariations.js"],"sourcesContent":["/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\r\nimport '../_version.js';\r\n/**\r\n * Generator function that yields possible variations on the original URL to\r\n * check, one at a time.\r\n *\r\n * @param {string} url\r\n * @param {Object} options\r\n *\r\n * @private\r\n * @memberof workbox-precaching\r\n */\r\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\r\n    const urlObject = new URL(url, location.href);\r\n    urlObject.hash = '';\r\n    yield urlObject.href;\r\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\r\n    yield urlWithoutIgnoredParams.href;\r\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\r\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\r\n        directoryURL.pathname += directoryIndex;\r\n        yield directoryURL.href;\r\n    }\r\n    if (cleanURLs) {\r\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\r\n        cleanURL.pathname += '.html';\r\n        yield cleanURL.href;\r\n    }\r\n    if (urlManipulation) {\r\n        const additionalURLs = urlManipulation({ url: urlObject });\r\n        for (const urlToAttempt of additionalURLs) {\r\n            yield urlToAttempt.href;\r\n        }\r\n    }\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,yBAAyB,QAAQ,gCAAgC;AAC1E,OAAO,gBAAgB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAUC,qBAAqB,CAACC,GAAG;EAAA,+EAA+H,CAAC,CAAC;IAAA,6BAA7HC,2BAA2B;IAA3BA,2BAA2B,sCAAG,CAAC,OAAO,EAAE,UAAU,CAAC;IAAA,2BAAEC,cAAc;IAAdA,cAAc,oCAAG,YAAY;IAAA,sBAAEC,SAAS;IAATA,SAAS,+BAAG,IAAI;IAAEC,eAAe,QAAfA,eAAe;EAAA;IAAA;IAAA;MAAA;QAAA;UACzJC,SAAS,GAAG,IAAIC,GAAG,CAACN,GAAG,EAAEO,QAAQ,CAACC,IAAI,CAAC;UAC7CH,SAAS,CAACI,IAAI,GAAG,EAAE;UAAC;UACpB,OAAMJ,SAAS,CAACG,IAAI;QAAA;UACdE,uBAAuB,GAAGZ,yBAAyB,CAACO,SAAS,EAAEJ,2BAA2B,CAAC;UAAA;UACjG,OAAMS,uBAAuB,CAACF,IAAI;QAAA;UAAA,MAC9BN,cAAc,IAAIQ,uBAAuB,CAACC,QAAQ,CAACC,QAAQ,CAAC,GAAG,CAAC;YAAA;YAAA;UAAA;UAC1DC,YAAY,GAAG,IAAIP,GAAG,CAACI,uBAAuB,CAACF,IAAI,CAAC;UAC1DK,YAAY,CAACF,QAAQ,IAAIT,cAAc;UAAC;UACxC,OAAMW,YAAY,CAACL,IAAI;QAAA;UAAA,KAEvBL,SAAS;YAAA;YAAA;UAAA;UACHW,QAAQ,GAAG,IAAIR,GAAG,CAACI,uBAAuB,CAACF,IAAI,CAAC;UACtDM,QAAQ,CAACH,QAAQ,IAAI,OAAO;UAAC;UAC7B,OAAMG,QAAQ,CAACN,IAAI;QAAA;UAAA,KAEnBJ,eAAe;YAAA;YAAA;UAAA;UACTW,cAAc,GAAGX,eAAe,CAAC;YAAEJ,GAAG,EAAEK;UAAU,CAAC,CAAC;UAAA,uCAC/BU,cAAc;UAAA;UAAA;QAAA;UAAA;YAAA;YAAA;UAAA;UAA9BC,YAAY;UAAA;UACnB,OAAMA,YAAY,CAACR,IAAI;QAAA;UAAA;UAAA;QAAA;UAAA;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}