{"ast":null,"code":"/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\nimport './_version.js';\n/**\r\n * Takes in a URL, and returns the corresponding URL that could be used to\r\n * lookup the entry in the precache.\r\n *\r\n * If a relative URL is provided, the location of the service worker file will\r\n * be used as the base.\r\n *\r\n * For precached entries without revision information, the cache key will be the\r\n * same as the original URL.\r\n *\r\n * For precached entries with revision information, the cache key will be the\r\n * original URL with the addition of a query parameter used for keeping track of\r\n * the revision info.\r\n *\r\n * @param {string} url The URL whose cache key to look up.\r\n * @return {string} The cache key that corresponds to that URL.\r\n *\r\n * @memberof workbox-precaching\r\n */\nfunction getCacheKeyForURL(url) {\n  var precacheController = getOrCreatePrecacheController();\n  return precacheController.getCacheKeyForURL(url);\n}\nexport { getCacheKeyForURL };","map":{"version":3,"names":["getOrCreatePrecacheController","getCacheKeyForURL","url","precacheController"],"sources":["D:/github/music-pwa-frontend/node_modules/workbox-precaching/getCacheKeyForURL.js"],"sourcesContent":["/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { getOrCreatePrecacheController } from './utils/getOrCreatePrecacheController.js';\r\nimport './_version.js';\r\n/**\r\n * Takes in a URL, and returns the corresponding URL that could be used to\r\n * lookup the entry in the precache.\r\n *\r\n * If a relative URL is provided, the location of the service worker file will\r\n * be used as the base.\r\n *\r\n * For precached entries without revision information, the cache key will be the\r\n * same as the original URL.\r\n *\r\n * For precached entries with revision information, the cache key will be the\r\n * original URL with the addition of a query parameter used for keeping track of\r\n * the revision info.\r\n *\r\n * @param {string} url The URL whose cache key to look up.\r\n * @return {string} The cache key that corresponds to that URL.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nfunction getCacheKeyForURL(url) {\r\n    const precacheController = getOrCreatePrecacheController();\r\n    return precacheController.getCacheKeyForURL(url);\r\n}\r\nexport { getCacheKeyForURL };\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,6BAA6B,QAAQ,0CAA0C;AACxF,OAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiB,CAACC,GAAG,EAAE;EAC5B,IAAMC,kBAAkB,GAAGH,6BAA6B,EAAE;EAC1D,OAAOG,kBAAkB,CAACF,iBAAiB,CAACC,GAAG,CAAC;AACpD;AACA,SAASD,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}