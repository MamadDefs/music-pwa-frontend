{"ast":null,"code":"import _regeneratorRuntime from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\r\n * An implementation of a\r\n * [stale-while-revalidate](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#stale-while-revalidate)\r\n * request strategy.\r\n *\r\n * Resources are requested from both the cache and the network in parallel.\r\n * The strategy will respond with the cached version if available, otherwise\r\n * wait for the network response. The cache is updated with the network response\r\n * with each successful request.\r\n *\r\n * By default, this strategy will cache responses with a 200 status code as\r\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\r\n * Opaque responses are cross-origin requests where the response doesn't\r\n * support [CORS](https://enable-cors.org/).\r\n *\r\n * If the network request fails, and there is no cache match, this will throw\r\n * a `WorkboxError` exception.\r\n *\r\n * @extends workbox-strategies.Strategy\r\n * @memberof workbox-strategies\r\n */\nvar StaleWhileRevalidate = /*#__PURE__*/function (_Strategy) {\n  _inherits(StaleWhileRevalidate, _Strategy);\n  var _super = _createSuper(StaleWhileRevalidate);\n  /**\r\n   * @param {Object} [options]\r\n   * @param {string} [options.cacheName] Cache name to store and retrieve\r\n   * requests. Defaults to cache names provided by\r\n   * {@link workbox-core.cacheNames}.\r\n   * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\r\n   * to use in conjunction with this caching strategy.\r\n   * @param {Object} [options.fetchOptions] Values passed along to the\r\n   * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\r\n   * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\r\n   * `fetch()` requests made by this strategy.\r\n   * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\r\n   */\n  function StaleWhileRevalidate() {\n    var _this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, StaleWhileRevalidate);\n    _this = _super.call(this, options);\n    // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n    // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n    if (!_this.plugins.some(function (p) {\n      return 'cacheWillUpdate' in p;\n    })) {\n      _this.plugins.unshift(cacheOkAndOpaquePlugin);\n    }\n    return _this;\n  }\n  /**\r\n   * @private\r\n   * @param {Request|string} request A request to run this strategy for.\r\n   * @param {workbox-strategies.StrategyHandler} handler The event that\r\n   *     triggered the request.\r\n   * @return {Promise<Response>}\r\n   */\n  _createClass(StaleWhileRevalidate, [{\n    key: \"_handle\",\n    value: function () {\n      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request, handler) {\n        var logs, fetchAndCachePromise, response, error, _iterator, _step, log;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              logs = [];\n              if (process.env.NODE_ENV !== 'production') {\n                assert.isInstance(request, Request, {\n                  moduleName: 'workbox-strategies',\n                  className: this.constructor.name,\n                  funcName: 'handle',\n                  paramName: 'request'\n                });\n              }\n              fetchAndCachePromise = handler.fetchAndCachePut(request).catch(function () {\n                // Swallow this error because a 'no-response' error will be thrown in\n                // main handler return flow. This will be in the `waitUntil()` flow.\n              });\n              void handler.waitUntil(fetchAndCachePromise);\n              _context.next = 6;\n              return handler.cacheMatch(request);\n            case 6:\n              response = _context.sent;\n              if (!response) {\n                _context.next = 11;\n                break;\n              }\n              if (process.env.NODE_ENV !== 'production') {\n                logs.push(\"Found a cached response in the '\".concat(this.cacheName, \"'\") + \" cache. Will update with the network response in the background.\");\n              }\n              _context.next = 21;\n              break;\n            case 11:\n              if (process.env.NODE_ENV !== 'production') {\n                logs.push(\"No response found in the '\".concat(this.cacheName, \"' cache. \") + \"Will wait for the network response.\");\n              }\n              _context.prev = 12;\n              _context.next = 15;\n              return fetchAndCachePromise;\n            case 15:\n              response = _context.sent;\n              _context.next = 21;\n              break;\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](12);\n              if (_context.t0 instanceof Error) {\n                error = _context.t0;\n              }\n            case 21:\n              if (process.env.NODE_ENV !== 'production') {\n                logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n                _iterator = _createForOfIteratorHelper(logs);\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    log = _step.value;\n                    logger.log(log);\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n                messages.printFinalResponse(response);\n                logger.groupEnd();\n              }\n              if (response) {\n                _context.next = 24;\n                break;\n              }\n              throw new WorkboxError('no-response', {\n                url: request.url,\n                error: error\n              });\n            case 24:\n              return _context.abrupt(\"return\", response);\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[12, 18]]);\n      }));\n      function _handle(_x, _x2) {\n        return _handle2.apply(this, arguments);\n      }\n      return _handle;\n    }()\n  }]);\n  return StaleWhileRevalidate;\n}(Strategy);\nexport { StaleWhileRevalidate };","map":{"version":3,"names":["assert","logger","WorkboxError","cacheOkAndOpaquePlugin","Strategy","messages","StaleWhileRevalidate","options","plugins","some","p","unshift","request","handler","logs","process","env","NODE_ENV","isInstance","Request","moduleName","className","constructor","name","funcName","paramName","fetchAndCachePromise","fetchAndCachePut","catch","waitUntil","cacheMatch","response","push","cacheName","Error","error","groupCollapsed","strategyStart","log","printFinalResponse","groupEnd","url"],"sources":["D:/github/music-pwa-frontend/node_modules/workbox-strategies/StaleWhileRevalidate.js"],"sourcesContent":["/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\r\nimport { Strategy } from './Strategy.js';\r\nimport { messages } from './utils/messages.js';\r\nimport './_version.js';\r\n/**\r\n * An implementation of a\r\n * [stale-while-revalidate](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#stale-while-revalidate)\r\n * request strategy.\r\n *\r\n * Resources are requested from both the cache and the network in parallel.\r\n * The strategy will respond with the cached version if available, otherwise\r\n * wait for the network response. The cache is updated with the network response\r\n * with each successful request.\r\n *\r\n * By default, this strategy will cache responses with a 200 status code as\r\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\r\n * Opaque responses are cross-origin requests where the response doesn't\r\n * support [CORS](https://enable-cors.org/).\r\n *\r\n * If the network request fails, and there is no cache match, this will throw\r\n * a `WorkboxError` exception.\r\n *\r\n * @extends workbox-strategies.Strategy\r\n * @memberof workbox-strategies\r\n */\r\nclass StaleWhileRevalidate extends Strategy {\r\n    /**\r\n     * @param {Object} [options]\r\n     * @param {string} [options.cacheName] Cache name to store and retrieve\r\n     * requests. Defaults to cache names provided by\r\n     * {@link workbox-core.cacheNames}.\r\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\r\n     * to use in conjunction with this caching strategy.\r\n     * @param {Object} [options.fetchOptions] Values passed along to the\r\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\r\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\r\n     * `fetch()` requests made by this strategy.\r\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\r\n     */\r\n    constructor(options = {}) {\r\n        super(options);\r\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\r\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\r\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\r\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {Request|string} request A request to run this strategy for.\r\n     * @param {workbox-strategies.StrategyHandler} handler The event that\r\n     *     triggered the request.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async _handle(request, handler) {\r\n        const logs = [];\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(request, Request, {\r\n                moduleName: 'workbox-strategies',\r\n                className: this.constructor.name,\r\n                funcName: 'handle',\r\n                paramName: 'request',\r\n            });\r\n        }\r\n        const fetchAndCachePromise = handler.fetchAndCachePut(request).catch(() => {\r\n            // Swallow this error because a 'no-response' error will be thrown in\r\n            // main handler return flow. This will be in the `waitUntil()` flow.\r\n        });\r\n        void handler.waitUntil(fetchAndCachePromise);\r\n        let response = await handler.cacheMatch(request);\r\n        let error;\r\n        if (response) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logs.push(`Found a cached response in the '${this.cacheName}'` +\r\n                    ` cache. Will update with the network response in the background.`);\r\n            }\r\n        }\r\n        else {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\r\n                    `Will wait for the network response.`);\r\n            }\r\n            try {\r\n                // NOTE(philipwalton): Really annoying that we have to type cast here.\r\n                // https://github.com/microsoft/TypeScript/issues/20006\r\n                response = (await fetchAndCachePromise);\r\n            }\r\n            catch (err) {\r\n                if (err instanceof Error) {\r\n                    error = err;\r\n                }\r\n            }\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\r\n            for (const log of logs) {\r\n                logger.log(log);\r\n            }\r\n            messages.printFinalResponse(response);\r\n            logger.groupEnd();\r\n        }\r\n        if (!response) {\r\n            throw new WorkboxError('no-response', { url: request.url, error });\r\n        }\r\n        return response;\r\n    }\r\n}\r\nexport { StaleWhileRevalidate };\r\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAM,QAAQ,iCAAiC;AACxD,SAASC,MAAM,QAAQ,iCAAiC;AACxD,SAASC,YAAY,QAAQ,uCAAuC;AACpE,SAASC,sBAAsB,QAAQ,qCAAqC;AAC5E,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,OAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA,IAqBMC,oBAAoB;EAAA;EAAA;EACtB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,gCAA0B;IAAA;IAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;IAAA;IACpB,0BAAMA,OAAO;IACb;IACA;IACA,IAAI,CAAC,MAAKC,OAAO,CAACC,IAAI,CAAC,UAACC,CAAC;MAAA,OAAK,iBAAiB,IAAIA,CAAC;IAAA,EAAC,EAAE;MACnD,MAAKF,OAAO,CAACG,OAAO,CAACR,sBAAsB,CAAC;IAChD;IAAC;EACL;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA;IAAA;MAAA,0EAOA,iBAAcS,OAAO,EAAEC,OAAO;QAAA;QAAA;UAAA;YAAA;cACpBC,IAAI,GAAG,EAAE;cACf,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;gBACvCjB,MAAM,CAACkB,UAAU,CAACN,OAAO,EAAEO,OAAO,EAAE;kBAChCC,UAAU,EAAE,oBAAoB;kBAChCC,SAAS,EAAE,IAAI,CAACC,WAAW,CAACC,IAAI;kBAChCC,QAAQ,EAAE,QAAQ;kBAClBC,SAAS,EAAE;gBACf,CAAC,CAAC;cACN;cACMC,oBAAoB,GAAGb,OAAO,CAACc,gBAAgB,CAACf,OAAO,CAAC,CAACgB,KAAK,CAAC,YAAM;gBACvE;gBACA;cAAA,CACH,CAAC;cACF,KAAKf,OAAO,CAACgB,SAAS,CAACH,oBAAoB,CAAC;cAAC;cAAA,OACxBb,OAAO,CAACiB,UAAU,CAAClB,OAAO,CAAC;YAAA;cAA5CmB,QAAQ;cAAA,KAERA,QAAQ;gBAAA;gBAAA;cAAA;cACR,IAAIhB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;gBACvCH,IAAI,CAACkB,IAAI,CAAC,0CAAmC,IAAI,CAACC,SAAS,2EACW,CAAC;cAC3E;cAAC;cAAA;YAAA;cAGD,IAAIlB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;gBACvCH,IAAI,CAACkB,IAAI,CAAC,oCAA6B,IAAI,CAACC,SAAS,sDACZ,CAAC;cAC9C;cAAC;cAAA;cAAA,OAIqBP,oBAAoB;YAAA;cAAtCK,QAAQ;cAAA;cAAA;YAAA;cAAA;cAAA;cAGR,IAAI,uBAAeG,KAAK,EAAE;gBACtBC,KAAK,cAAM;cACf;YAAC;cAGT,IAAIpB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;gBACvChB,MAAM,CAACmC,cAAc,CAAC/B,QAAQ,CAACgC,aAAa,CAAC,IAAI,CAACf,WAAW,CAACC,IAAI,EAAEX,OAAO,CAAC,CAAC;gBAAC,uCAC5DE,IAAI;gBAAA;kBAAtB,oDAAwB;oBAAbwB,GAAG;oBACVrC,MAAM,CAACqC,GAAG,CAACA,GAAG,CAAC;kBACnB;gBAAC;kBAAA;gBAAA;kBAAA;gBAAA;gBACDjC,QAAQ,CAACkC,kBAAkB,CAACR,QAAQ,CAAC;gBACrC9B,MAAM,CAACuC,QAAQ,EAAE;cACrB;cAAC,IACIT,QAAQ;gBAAA;gBAAA;cAAA;cAAA,MACH,IAAI7B,YAAY,CAAC,aAAa,EAAE;gBAAEuC,GAAG,EAAE7B,OAAO,CAAC6B,GAAG;gBAAEN,KAAK,EAALA;cAAM,CAAC,CAAC;YAAA;cAAA,iCAE/DJ,QAAQ;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CAClB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;EAAA;AAAA,EAhF8B3B,QAAQ;AAkF3C,SAASE,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}