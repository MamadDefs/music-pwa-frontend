{"ast":null,"code":"import _regeneratorRuntime from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { timeout } from './timeout.js';\nimport '../_version.js';\nvar MAX_RETRY_TIME = 2000;\n/**\r\n * Returns a promise that resolves to a window client matching the passed\r\n * `resultingClientId`. For browsers that don't support `resultingClientId`\r\n * or if waiting for the resulting client to apper takes too long, resolve to\r\n * `undefined`.\r\n *\r\n * @param {string} [resultingClientId]\r\n * @return {Promise<Client|undefined>}\r\n * @private\r\n */\nexport function resultingClientExists(_x) {\n  return _resultingClientExists.apply(this, arguments);\n}\nfunction _resultingClientExists() {\n  _resultingClientExists = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(resultingClientId) {\n    var existingWindows, existingWindowIds, resultingWindow, startTime;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (resultingClientId) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\");\n        case 2:\n          _context.next = 4;\n          return self.clients.matchAll({\n            type: 'window'\n          });\n        case 4:\n          existingWindows = _context.sent;\n          existingWindowIds = new Set(existingWindows.map(function (w) {\n            return w.id;\n          }));\n          startTime = performance.now(); // Only wait up to `MAX_RETRY_TIME` to find a matching client.\n        case 7:\n          if (!(performance.now() - startTime < MAX_RETRY_TIME)) {\n            _context.next = 18;\n            break;\n          }\n          _context.next = 10;\n          return self.clients.matchAll({\n            type: 'window'\n          });\n        case 10:\n          existingWindows = _context.sent;\n          resultingWindow = existingWindows.find(function (w) {\n            if (resultingClientId) {\n              // If we have a `resultingClientId`, we can match on that.\n              return w.id === resultingClientId;\n            } else {\n              // Otherwise match on finding a window not in `existingWindowIds`.\n              return !existingWindowIds.has(w.id);\n            }\n          });\n          if (!resultingWindow) {\n            _context.next = 14;\n            break;\n          }\n          return _context.abrupt(\"break\", 18);\n        case 14:\n          _context.next = 16;\n          return timeout(100);\n        case 16:\n          _context.next = 7;\n          break;\n        case 18:\n          return _context.abrupt(\"return\", resultingWindow);\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _resultingClientExists.apply(this, arguments);\n}","map":{"version":3,"names":["timeout","MAX_RETRY_TIME","resultingClientExists","resultingClientId","self","clients","matchAll","type","existingWindows","existingWindowIds","Set","map","w","id","startTime","performance","now","resultingWindow","find","has"],"sources":["D:/github/music-pwa-frontend/node_modules/workbox-core/_private/resultingClientExists.js"],"sourcesContent":["/*\r\n  Copyright 2019 Google LLC\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { timeout } from './timeout.js';\r\nimport '../_version.js';\r\nconst MAX_RETRY_TIME = 2000;\r\n/**\r\n * Returns a promise that resolves to a window client matching the passed\r\n * `resultingClientId`. For browsers that don't support `resultingClientId`\r\n * or if waiting for the resulting client to apper takes too long, resolve to\r\n * `undefined`.\r\n *\r\n * @param {string} [resultingClientId]\r\n * @return {Promise<Client|undefined>}\r\n * @private\r\n */\r\nexport async function resultingClientExists(resultingClientId) {\r\n    if (!resultingClientId) {\r\n        return;\r\n    }\r\n    let existingWindows = await self.clients.matchAll({ type: 'window' });\r\n    const existingWindowIds = new Set(existingWindows.map((w) => w.id));\r\n    let resultingWindow;\r\n    const startTime = performance.now();\r\n    // Only wait up to `MAX_RETRY_TIME` to find a matching client.\r\n    while (performance.now() - startTime < MAX_RETRY_TIME) {\r\n        existingWindows = await self.clients.matchAll({ type: 'window' });\r\n        resultingWindow = existingWindows.find((w) => {\r\n            if (resultingClientId) {\r\n                // If we have a `resultingClientId`, we can match on that.\r\n                return w.id === resultingClientId;\r\n            }\r\n            else {\r\n                // Otherwise match on finding a window not in `existingWindowIds`.\r\n                return !existingWindowIds.has(w.id);\r\n            }\r\n        });\r\n        if (resultingWindow) {\r\n            break;\r\n        }\r\n        // Sleep for 100ms and retry.\r\n        await timeout(100);\r\n    }\r\n    return resultingWindow;\r\n}\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAO,QAAQ,cAAc;AACtC,OAAO,gBAAgB;AACvB,IAAMC,cAAc,GAAG,IAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAsBC,qBAAqB;EAAA;AAAA;AA4B1C;EAAA,oFA5BM,iBAAqCC,iBAAiB;IAAA;IAAA;MAAA;QAAA;UAAA,IACpDA,iBAAiB;YAAA;YAAA;UAAA;UAAA;QAAA;UAAA;UAAA,OAGMC,IAAI,CAACC,OAAO,CAACC,QAAQ,CAAC;YAAEC,IAAI,EAAE;UAAS,CAAC,CAAC;QAAA;UAAjEC,eAAe;UACbC,iBAAiB,GAAG,IAAIC,GAAG,CAACF,eAAe,CAACG,GAAG,CAAC,UAACC,CAAC;YAAA,OAAKA,CAAC,CAACC,EAAE;UAAA,EAAC,CAAC;UAE7DC,SAAS,GAAGC,WAAW,CAACC,GAAG,EAAE,EACnC;QAAA;UAAA,MACOD,WAAW,CAACC,GAAG,EAAE,GAAGF,SAAS,GAAGb,cAAc;YAAA;YAAA;UAAA;UAAA;UAAA,OACzBG,IAAI,CAACC,OAAO,CAACC,QAAQ,CAAC;YAAEC,IAAI,EAAE;UAAS,CAAC,CAAC;QAAA;UAAjEC,eAAe;UACfS,eAAe,GAAGT,eAAe,CAACU,IAAI,CAAC,UAACN,CAAC,EAAK;YAC1C,IAAIT,iBAAiB,EAAE;cACnB;cACA,OAAOS,CAAC,CAACC,EAAE,KAAKV,iBAAiB;YACrC,CAAC,MACI;cACD;cACA,OAAO,CAACM,iBAAiB,CAACU,GAAG,CAACP,CAAC,CAACC,EAAE,CAAC;YACvC;UACJ,CAAC,CAAC;UAAC,KACCI,eAAe;YAAA;YAAA;UAAA;UAAA;QAAA;UAAA;UAAA,OAIbjB,OAAO,CAAC,GAAG,CAAC;QAAA;UAAA;UAAA;QAAA;UAAA,iCAEfiB,eAAe;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CACzB;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}