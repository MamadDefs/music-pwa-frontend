{"ast":null,"code":"import _regeneratorRuntime from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createForOfIteratorHelper from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\nimport { createCacheKey } from './utils/createCacheKey.js';\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\nimport { printInstallDetails } from './utils/printInstallDetails.js';\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\nimport './_version.js';\n/**\r\n * Performs efficient precaching of assets.\r\n *\r\n * @memberof workbox-precaching\r\n */\nvar PrecacheController = /*#__PURE__*/function () {\n  /**\r\n   * Create a new PrecacheController.\r\n   *\r\n   * @param {Object} [options]\r\n   * @param {string} [options.cacheName] The cache to use for precaching.\r\n   * @param {string} [options.plugins] Plugins to use when precaching as well\r\n   * as responding to fetch events for precached assets.\r\n   * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\r\n   * get the response from the network if there's a precache miss.\r\n   */\n  function PrecacheController() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      cacheName = _ref.cacheName,\n      _ref$plugins = _ref.plugins,\n      plugins = _ref$plugins === void 0 ? [] : _ref$plugins,\n      _ref$fallbackToNetwor = _ref.fallbackToNetwork,\n      fallbackToNetwork = _ref$fallbackToNetwor === void 0 ? true : _ref$fallbackToNetwor;\n    _classCallCheck(this, PrecacheController);\n    this._urlsToCacheKeys = new Map();\n    this._urlsToCacheModes = new Map();\n    this._cacheKeysToIntegrities = new Map();\n    this._strategy = new PrecacheStrategy({\n      cacheName: cacheNames.getPrecacheName(cacheName),\n      plugins: [].concat(_toConsumableArray(plugins), [new PrecacheCacheKeyPlugin({\n        precacheController: this\n      })]),\n      fallbackToNetwork: fallbackToNetwork\n    });\n    // Bind the install and activate methods to the instance.\n    this.install = this.install.bind(this);\n    this.activate = this.activate.bind(this);\n  }\n  /**\r\n   * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\r\n   * used to cache assets and respond to fetch events.\r\n   */\n  _createClass(PrecacheController, [{\n    key: \"strategy\",\n    get: function get() {\n      return this._strategy;\n    }\n    /**\r\n     * Adds items to the precache list, removing any duplicates and\r\n     * stores the files in the\r\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\r\n     * worker installs.\r\n     *\r\n     * This method can be called multiple times.\r\n     *\r\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\r\n     */\n  }, {\n    key: \"precache\",\n    value: function precache(entries) {\n      this.addToCacheList(entries);\n      if (!this._installAndActiveListenersAdded) {\n        self.addEventListener('install', this.install);\n        self.addEventListener('activate', this.activate);\n        this._installAndActiveListenersAdded = true;\n      }\n    }\n    /**\r\n     * This method will add items to the precache list, removing duplicates\r\n     * and ensuring the information is valid.\r\n     *\r\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\r\n     *     Array of entries to precache.\r\n     */\n  }, {\n    key: \"addToCacheList\",\n    value: function addToCacheList(entries) {\n      if (process.env.NODE_ENV !== 'production') {\n        assert.isArray(entries, {\n          moduleName: 'workbox-precaching',\n          className: 'PrecacheController',\n          funcName: 'addToCacheList',\n          paramName: 'entries'\n        });\n      }\n      var urlsToWarnAbout = [];\n      var _iterator = _createForOfIteratorHelper(entries),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var entry = _step.value;\n          // See https://github.com/GoogleChrome/workbox/issues/2259\n          if (typeof entry === 'string') {\n            urlsToWarnAbout.push(entry);\n          } else if (entry && entry.revision === undefined) {\n            urlsToWarnAbout.push(entry.url);\n          }\n          var _createCacheKey = createCacheKey(entry),\n            cacheKey = _createCacheKey.cacheKey,\n            url = _createCacheKey.url;\n          var cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\n          if (this._urlsToCacheKeys.has(url) && this._urlsToCacheKeys.get(url) !== cacheKey) {\n            throw new WorkboxError('add-to-cache-list-conflicting-entries', {\n              firstEntry: this._urlsToCacheKeys.get(url),\n              secondEntry: cacheKey\n            });\n          }\n          if (typeof entry !== 'string' && entry.integrity) {\n            if (this._cacheKeysToIntegrities.has(cacheKey) && this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\n              throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\n                url: url\n              });\n            }\n            this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\n          }\n          this._urlsToCacheKeys.set(url, cacheKey);\n          this._urlsToCacheModes.set(url, cacheMode);\n          if (urlsToWarnAbout.length > 0) {\n            var warningMessage = \"Workbox is precaching URLs without revision \" + \"info: \".concat(urlsToWarnAbout.join(', '), \"\\nThis is generally NOT safe. \") + \"Learn more at https://bit.ly/wb-precache\";\n            if (process.env.NODE_ENV === 'production') {\n              // Use console directly to display this warning without bloating\n              // bundle sizes by pulling in all of the logger codebase in prod.\n              console.warn(warningMessage);\n            } else {\n              logger.warn(warningMessage);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    /**\r\n     * Precaches new and updated assets. Call this method from the service worker\r\n     * install event.\r\n     *\r\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\r\n     * to call it yourself in your event handlers.\r\n     *\r\n     * @param {ExtendableEvent} event\r\n     * @return {Promise<workbox-precaching.InstallResult>}\r\n     */\n  }, {\n    key: \"install\",\n    value: function install(event) {\n      var _this = this;\n      // waitUntil returns Promise<any>\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return waitUntil(event, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var installReportPlugin, _iterator2, _step2, _step2$value, url, cacheKey, integrity, cacheMode, request, updatedURLs, notUpdatedURLs;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              installReportPlugin = new PrecacheInstallReportPlugin();\n              _this.strategy.plugins.push(installReportPlugin);\n              // Cache entries one at a time.\n              // See https://github.com/GoogleChrome/workbox/issues/2528\n              _iterator2 = _createForOfIteratorHelper(_this._urlsToCacheKeys);\n              _context.prev = 3;\n              _iterator2.s();\n            case 5:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 14;\n                break;\n              }\n              _step2$value = _slicedToArray(_step2.value, 2), url = _step2$value[0], cacheKey = _step2$value[1];\n              integrity = _this._cacheKeysToIntegrities.get(cacheKey);\n              cacheMode = _this._urlsToCacheModes.get(url);\n              request = new Request(url, {\n                integrity: integrity,\n                cache: cacheMode,\n                credentials: 'same-origin'\n              });\n              _context.next = 12;\n              return Promise.all(_this.strategy.handleAll({\n                params: {\n                  cacheKey: cacheKey\n                },\n                request: request,\n                event: event\n              }));\n            case 12:\n              _context.next = 5;\n              break;\n            case 14:\n              _context.next = 19;\n              break;\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](3);\n              _iterator2.e(_context.t0);\n            case 19:\n              _context.prev = 19;\n              _iterator2.f();\n              return _context.finish(19);\n            case 22:\n              updatedURLs = installReportPlugin.updatedURLs, notUpdatedURLs = installReportPlugin.notUpdatedURLs;\n              if (process.env.NODE_ENV !== 'production') {\n                printInstallDetails(updatedURLs, notUpdatedURLs);\n              }\n              return _context.abrupt(\"return\", {\n                updatedURLs: updatedURLs,\n                notUpdatedURLs: notUpdatedURLs\n              });\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[3, 16, 19, 22]]);\n      })));\n    }\n    /**\r\n     * Deletes assets that are no longer present in the current precache manifest.\r\n     * Call this method from the service worker activate event.\r\n     *\r\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\r\n     * to call it yourself in your event handlers.\r\n     *\r\n     * @param {ExtendableEvent} event\r\n     * @return {Promise<workbox-precaching.CleanupResult>}\r\n     */\n  }, {\n    key: \"activate\",\n    value: function activate(event) {\n      var _this2 = this;\n      // waitUntil returns Promise<any>\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return waitUntil(event, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var cache, currentlyCachedRequests, expectedCacheKeys, deletedURLs, _iterator3, _step3, request;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return self.caches.open(_this2.strategy.cacheName);\n            case 2:\n              cache = _context2.sent;\n              _context2.next = 5;\n              return cache.keys();\n            case 5:\n              currentlyCachedRequests = _context2.sent;\n              expectedCacheKeys = new Set(_this2._urlsToCacheKeys.values());\n              deletedURLs = [];\n              _iterator3 = _createForOfIteratorHelper(currentlyCachedRequests);\n              _context2.prev = 9;\n              _iterator3.s();\n            case 11:\n              if ((_step3 = _iterator3.n()).done) {\n                _context2.next = 19;\n                break;\n              }\n              request = _step3.value;\n              if (expectedCacheKeys.has(request.url)) {\n                _context2.next = 17;\n                break;\n              }\n              _context2.next = 16;\n              return cache.delete(request);\n            case 16:\n              deletedURLs.push(request.url);\n            case 17:\n              _context2.next = 11;\n              break;\n            case 19:\n              _context2.next = 24;\n              break;\n            case 21:\n              _context2.prev = 21;\n              _context2.t0 = _context2[\"catch\"](9);\n              _iterator3.e(_context2.t0);\n            case 24:\n              _context2.prev = 24;\n              _iterator3.f();\n              return _context2.finish(24);\n            case 27:\n              if (process.env.NODE_ENV !== 'production') {\n                printCleanupDetails(deletedURLs);\n              }\n              return _context2.abrupt(\"return\", {\n                deletedURLs: deletedURLs\n              });\n            case 29:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[9, 21, 24, 27]]);\n      })));\n    }\n    /**\r\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\r\n     * into account the revision information for the URL.\r\n     *\r\n     * @return {Map<string, string>} A URL to cache key mapping.\r\n     */\n  }, {\n    key: \"getURLsToCacheKeys\",\n    value: function getURLsToCacheKeys() {\n      return this._urlsToCacheKeys;\n    }\n    /**\r\n     * Returns a list of all the URLs that have been precached by the current\r\n     * service worker.\r\n     *\r\n     * @return {Array<string>} The precached URLs.\r\n     */\n  }, {\n    key: \"getCachedURLs\",\n    value: function getCachedURLs() {\n      return _toConsumableArray(this._urlsToCacheKeys.keys());\n    }\n    /**\r\n     * Returns the cache key used for storing a given URL. If that URL is\r\n     * unversioned, like `/index.html', then the cache key will be the original\r\n     * URL with a search parameter appended to it.\r\n     *\r\n     * @param {string} url A URL whose cache key you want to look up.\r\n     * @return {string} The versioned URL that corresponds to a cache key\r\n     * for the original URL, or undefined if that URL isn't precached.\r\n     */\n  }, {\n    key: \"getCacheKeyForURL\",\n    value: function getCacheKeyForURL(url) {\n      var urlObject = new URL(url, location.href);\n      return this._urlsToCacheKeys.get(urlObject.href);\n    }\n    /**\r\n     * @param {string} url A cache key whose SRI you want to look up.\r\n     * @return {string} The subresource integrity associated with the cache key,\r\n     * or undefined if it's not set.\r\n     */\n  }, {\n    key: \"getIntegrityForCacheKey\",\n    value: function getIntegrityForCacheKey(cacheKey) {\n      return this._cacheKeysToIntegrities.get(cacheKey);\n    }\n    /**\r\n     * This acts as a drop-in replacement for\r\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\r\n     * with the following differences:\r\n     *\r\n     * - It knows what the name of the precache is, and only checks in that cache.\r\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\r\n     * and it will automatically look up the correct cache key for the currently\r\n     * active revision of that URL.\r\n     *\r\n     * E.g., `matchPrecache('index.html')` will find the correct precached\r\n     * response for the currently active service worker, even if the actual cache\r\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\r\n     *\r\n     * @param {string|Request} request The key (without revisioning parameters)\r\n     * to look up in the precache.\r\n     * @return {Promise<Response|undefined>}\r\n     */\n  }, {\n    key: \"matchPrecache\",\n    value: function () {\n      var _matchPrecache = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(request) {\n        var url, cacheKey, cache;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              url = request instanceof Request ? request.url : request;\n              cacheKey = this.getCacheKeyForURL(url);\n              if (!cacheKey) {\n                _context3.next = 7;\n                break;\n              }\n              _context3.next = 5;\n              return self.caches.open(this.strategy.cacheName);\n            case 5:\n              cache = _context3.sent;\n              return _context3.abrupt(\"return\", cache.match(cacheKey));\n            case 7:\n              return _context3.abrupt(\"return\", undefined);\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function matchPrecache(_x) {\n        return _matchPrecache.apply(this, arguments);\n      }\n      return matchPrecache;\n    }()\n    /**\r\n     * Returns a function that looks up `url` in the precache (taking into\r\n     * account revision information), and returns the corresponding `Response`.\r\n     *\r\n     * @param {string} url The precached URL which will be used to lookup the\r\n     * `Response`.\r\n     * @return {workbox-routing~handlerCallback}\r\n     */\n  }, {\n    key: \"createHandlerBoundToURL\",\n    value: function createHandlerBoundToURL(url) {\n      var _this3 = this;\n      var cacheKey = this.getCacheKeyForURL(url);\n      if (!cacheKey) {\n        throw new WorkboxError('non-precached-url', {\n          url: url\n        });\n      }\n      return function (options) {\n        options.request = new Request(url);\n        options.params = Object.assign({\n          cacheKey: cacheKey\n        }, options.params);\n        return _this3.strategy.handle(options);\n      };\n    }\n  }]);\n  return PrecacheController;\n}();\nexport { PrecacheController };","map":{"version":3,"names":["assert","cacheNames","logger","WorkboxError","waitUntil","createCacheKey","PrecacheInstallReportPlugin","PrecacheCacheKeyPlugin","printCleanupDetails","printInstallDetails","PrecacheStrategy","PrecacheController","cacheName","plugins","fallbackToNetwork","_urlsToCacheKeys","Map","_urlsToCacheModes","_cacheKeysToIntegrities","_strategy","getPrecacheName","precacheController","install","bind","activate","entries","addToCacheList","_installAndActiveListenersAdded","self","addEventListener","process","env","NODE_ENV","isArray","moduleName","className","funcName","paramName","urlsToWarnAbout","entry","push","revision","undefined","url","cacheKey","cacheMode","has","get","firstEntry","secondEntry","integrity","set","length","warningMessage","join","console","warn","event","installReportPlugin","strategy","request","Request","cache","credentials","Promise","all","handleAll","params","updatedURLs","notUpdatedURLs","caches","open","keys","currentlyCachedRequests","expectedCacheKeys","Set","values","deletedURLs","delete","urlObject","URL","location","href","getCacheKeyForURL","match","options","Object","assign","handle"],"sources":["D:/github/music-pwa-frontend/node_modules/workbox-precaching/PrecacheController.js"],"sourcesContent":["/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { waitUntil } from 'workbox-core/_private/waitUntil.js';\r\nimport { createCacheKey } from './utils/createCacheKey.js';\r\nimport { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';\r\nimport { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';\r\nimport { printCleanupDetails } from './utils/printCleanupDetails.js';\r\nimport { printInstallDetails } from './utils/printInstallDetails.js';\r\nimport { PrecacheStrategy } from './PrecacheStrategy.js';\r\nimport './_version.js';\r\n/**\r\n * Performs efficient precaching of assets.\r\n *\r\n * @memberof workbox-precaching\r\n */\r\nclass PrecacheController {\r\n    /**\r\n     * Create a new PrecacheController.\r\n     *\r\n     * @param {Object} [options]\r\n     * @param {string} [options.cacheName] The cache to use for precaching.\r\n     * @param {string} [options.plugins] Plugins to use when precaching as well\r\n     * as responding to fetch events for precached assets.\r\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\r\n     * get the response from the network if there's a precache miss.\r\n     */\r\n    constructor({ cacheName, plugins = [], fallbackToNetwork = true, } = {}) {\r\n        this._urlsToCacheKeys = new Map();\r\n        this._urlsToCacheModes = new Map();\r\n        this._cacheKeysToIntegrities = new Map();\r\n        this._strategy = new PrecacheStrategy({\r\n            cacheName: cacheNames.getPrecacheName(cacheName),\r\n            plugins: [\r\n                ...plugins,\r\n                new PrecacheCacheKeyPlugin({ precacheController: this }),\r\n            ],\r\n            fallbackToNetwork,\r\n        });\r\n        // Bind the install and activate methods to the instance.\r\n        this.install = this.install.bind(this);\r\n        this.activate = this.activate.bind(this);\r\n    }\r\n    /**\r\n     * @type {workbox-precaching.PrecacheStrategy} The strategy created by this controller and\r\n     * used to cache assets and respond to fetch events.\r\n     */\r\n    get strategy() {\r\n        return this._strategy;\r\n    }\r\n    /**\r\n     * Adds items to the precache list, removing any duplicates and\r\n     * stores the files in the\r\n     * {@link workbox-core.cacheNames|\"precache cache\"} when the service\r\n     * worker installs.\r\n     *\r\n     * This method can be called multiple times.\r\n     *\r\n     * @param {Array<Object|string>} [entries=[]] Array of entries to precache.\r\n     */\r\n    precache(entries) {\r\n        this.addToCacheList(entries);\r\n        if (!this._installAndActiveListenersAdded) {\r\n            self.addEventListener('install', this.install);\r\n            self.addEventListener('activate', this.activate);\r\n            this._installAndActiveListenersAdded = true;\r\n        }\r\n    }\r\n    /**\r\n     * This method will add items to the precache list, removing duplicates\r\n     * and ensuring the information is valid.\r\n     *\r\n     * @param {Array<workbox-precaching.PrecacheController.PrecacheEntry|string>} entries\r\n     *     Array of entries to precache.\r\n     */\r\n    addToCacheList(entries) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isArray(entries, {\r\n                moduleName: 'workbox-precaching',\r\n                className: 'PrecacheController',\r\n                funcName: 'addToCacheList',\r\n                paramName: 'entries',\r\n            });\r\n        }\r\n        const urlsToWarnAbout = [];\r\n        for (const entry of entries) {\r\n            // See https://github.com/GoogleChrome/workbox/issues/2259\r\n            if (typeof entry === 'string') {\r\n                urlsToWarnAbout.push(entry);\r\n            }\r\n            else if (entry && entry.revision === undefined) {\r\n                urlsToWarnAbout.push(entry.url);\r\n            }\r\n            const { cacheKey, url } = createCacheKey(entry);\r\n            const cacheMode = typeof entry !== 'string' && entry.revision ? 'reload' : 'default';\r\n            if (this._urlsToCacheKeys.has(url) &&\r\n                this._urlsToCacheKeys.get(url) !== cacheKey) {\r\n                throw new WorkboxError('add-to-cache-list-conflicting-entries', {\r\n                    firstEntry: this._urlsToCacheKeys.get(url),\r\n                    secondEntry: cacheKey,\r\n                });\r\n            }\r\n            if (typeof entry !== 'string' && entry.integrity) {\r\n                if (this._cacheKeysToIntegrities.has(cacheKey) &&\r\n                    this._cacheKeysToIntegrities.get(cacheKey) !== entry.integrity) {\r\n                    throw new WorkboxError('add-to-cache-list-conflicting-integrities', {\r\n                        url,\r\n                    });\r\n                }\r\n                this._cacheKeysToIntegrities.set(cacheKey, entry.integrity);\r\n            }\r\n            this._urlsToCacheKeys.set(url, cacheKey);\r\n            this._urlsToCacheModes.set(url, cacheMode);\r\n            if (urlsToWarnAbout.length > 0) {\r\n                const warningMessage = `Workbox is precaching URLs without revision ` +\r\n                    `info: ${urlsToWarnAbout.join(', ')}\\nThis is generally NOT safe. ` +\r\n                    `Learn more at https://bit.ly/wb-precache`;\r\n                if (process.env.NODE_ENV === 'production') {\r\n                    // Use console directly to display this warning without bloating\r\n                    // bundle sizes by pulling in all of the logger codebase in prod.\r\n                    console.warn(warningMessage);\r\n                }\r\n                else {\r\n                    logger.warn(warningMessage);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Precaches new and updated assets. Call this method from the service worker\r\n     * install event.\r\n     *\r\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\r\n     * to call it yourself in your event handlers.\r\n     *\r\n     * @param {ExtendableEvent} event\r\n     * @return {Promise<workbox-precaching.InstallResult>}\r\n     */\r\n    install(event) {\r\n        // waitUntil returns Promise<any>\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return waitUntil(event, async () => {\r\n            const installReportPlugin = new PrecacheInstallReportPlugin();\r\n            this.strategy.plugins.push(installReportPlugin);\r\n            // Cache entries one at a time.\r\n            // See https://github.com/GoogleChrome/workbox/issues/2528\r\n            for (const [url, cacheKey] of this._urlsToCacheKeys) {\r\n                const integrity = this._cacheKeysToIntegrities.get(cacheKey);\r\n                const cacheMode = this._urlsToCacheModes.get(url);\r\n                const request = new Request(url, {\r\n                    integrity,\r\n                    cache: cacheMode,\r\n                    credentials: 'same-origin',\r\n                });\r\n                await Promise.all(this.strategy.handleAll({\r\n                    params: { cacheKey },\r\n                    request,\r\n                    event,\r\n                }));\r\n            }\r\n            const { updatedURLs, notUpdatedURLs } = installReportPlugin;\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                printInstallDetails(updatedURLs, notUpdatedURLs);\r\n            }\r\n            return { updatedURLs, notUpdatedURLs };\r\n        });\r\n    }\r\n    /**\r\n     * Deletes assets that are no longer present in the current precache manifest.\r\n     * Call this method from the service worker activate event.\r\n     *\r\n     * Note: this method calls `event.waitUntil()` for you, so you do not need\r\n     * to call it yourself in your event handlers.\r\n     *\r\n     * @param {ExtendableEvent} event\r\n     * @return {Promise<workbox-precaching.CleanupResult>}\r\n     */\r\n    activate(event) {\r\n        // waitUntil returns Promise<any>\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n        return waitUntil(event, async () => {\r\n            const cache = await self.caches.open(this.strategy.cacheName);\r\n            const currentlyCachedRequests = await cache.keys();\r\n            const expectedCacheKeys = new Set(this._urlsToCacheKeys.values());\r\n            const deletedURLs = [];\r\n            for (const request of currentlyCachedRequests) {\r\n                if (!expectedCacheKeys.has(request.url)) {\r\n                    await cache.delete(request);\r\n                    deletedURLs.push(request.url);\r\n                }\r\n            }\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                printCleanupDetails(deletedURLs);\r\n            }\r\n            return { deletedURLs };\r\n        });\r\n    }\r\n    /**\r\n     * Returns a mapping of a precached URL to the corresponding cache key, taking\r\n     * into account the revision information for the URL.\r\n     *\r\n     * @return {Map<string, string>} A URL to cache key mapping.\r\n     */\r\n    getURLsToCacheKeys() {\r\n        return this._urlsToCacheKeys;\r\n    }\r\n    /**\r\n     * Returns a list of all the URLs that have been precached by the current\r\n     * service worker.\r\n     *\r\n     * @return {Array<string>} The precached URLs.\r\n     */\r\n    getCachedURLs() {\r\n        return [...this._urlsToCacheKeys.keys()];\r\n    }\r\n    /**\r\n     * Returns the cache key used for storing a given URL. If that URL is\r\n     * unversioned, like `/index.html', then the cache key will be the original\r\n     * URL with a search parameter appended to it.\r\n     *\r\n     * @param {string} url A URL whose cache key you want to look up.\r\n     * @return {string} The versioned URL that corresponds to a cache key\r\n     * for the original URL, or undefined if that URL isn't precached.\r\n     */\r\n    getCacheKeyForURL(url) {\r\n        const urlObject = new URL(url, location.href);\r\n        return this._urlsToCacheKeys.get(urlObject.href);\r\n    }\r\n    /**\r\n     * @param {string} url A cache key whose SRI you want to look up.\r\n     * @return {string} The subresource integrity associated with the cache key,\r\n     * or undefined if it's not set.\r\n     */\r\n    getIntegrityForCacheKey(cacheKey) {\r\n        return this._cacheKeysToIntegrities.get(cacheKey);\r\n    }\r\n    /**\r\n     * This acts as a drop-in replacement for\r\n     * [`cache.match()`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/match)\r\n     * with the following differences:\r\n     *\r\n     * - It knows what the name of the precache is, and only checks in that cache.\r\n     * - It allows you to pass in an \"original\" URL without versioning parameters,\r\n     * and it will automatically look up the correct cache key for the currently\r\n     * active revision of that URL.\r\n     *\r\n     * E.g., `matchPrecache('index.html')` will find the correct precached\r\n     * response for the currently active service worker, even if the actual cache\r\n     * key is `'/index.html?__WB_REVISION__=1234abcd'`.\r\n     *\r\n     * @param {string|Request} request The key (without revisioning parameters)\r\n     * to look up in the precache.\r\n     * @return {Promise<Response|undefined>}\r\n     */\r\n    async matchPrecache(request) {\r\n        const url = request instanceof Request ? request.url : request;\r\n        const cacheKey = this.getCacheKeyForURL(url);\r\n        if (cacheKey) {\r\n            const cache = await self.caches.open(this.strategy.cacheName);\r\n            return cache.match(cacheKey);\r\n        }\r\n        return undefined;\r\n    }\r\n    /**\r\n     * Returns a function that looks up `url` in the precache (taking into\r\n     * account revision information), and returns the corresponding `Response`.\r\n     *\r\n     * @param {string} url The precached URL which will be used to lookup the\r\n     * `Response`.\r\n     * @return {workbox-routing~handlerCallback}\r\n     */\r\n    createHandlerBoundToURL(url) {\r\n        const cacheKey = this.getCacheKeyForURL(url);\r\n        if (!cacheKey) {\r\n            throw new WorkboxError('non-precached-url', { url });\r\n        }\r\n        return (options) => {\r\n            options.request = new Request(url);\r\n            options.params = Object.assign({ cacheKey }, options.params);\r\n            return this.strategy.handle(options);\r\n        };\r\n    }\r\n}\r\nexport { PrecacheController };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}