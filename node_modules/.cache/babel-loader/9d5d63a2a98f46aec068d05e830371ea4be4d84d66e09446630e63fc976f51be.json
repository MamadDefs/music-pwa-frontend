{"ast":null,"code":"import _regeneratorRuntime from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\r\n * Allows developers to copy a response and modify its `headers`, `status`,\r\n * or `statusText` values (the values settable via a\r\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\r\n * object in the constructor).\r\n * To modify these values, pass a function as the second argument. That\r\n * function will be invoked with a single object with the response properties\r\n * `{headers, status, statusText}`. The return value of this function will\r\n * be used as the `ResponseInit` for the new `Response`. To change the values\r\n * either modify the passed parameter(s) and return it, or return a totally\r\n * new object.\r\n *\r\n * This method is intentionally limited to same-origin responses, regardless of\r\n * whether CORS was used or not.\r\n *\r\n * @param {Response} response\r\n * @param {Function} modifier\r\n * @memberof workbox-core\r\n */\nfunction copyResponse(_x, _x2) {\n  return _copyResponse.apply(this, arguments);\n}\nfunction _copyResponse() {\n  _copyResponse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(response, modifier) {\n    var origin, responseURL, clonedResponse, responseInit, modifiedResponseInit, body;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          origin = null; // If response.url isn't set, assume it's cross-origin and keep origin null.\n          if (response.url) {\n            responseURL = new URL(response.url);\n            origin = responseURL.origin;\n          }\n          if (!(origin !== self.location.origin)) {\n            _context.next = 4;\n            break;\n          }\n          throw new WorkboxError('cross-origin-copy-response', {\n            origin: origin\n          });\n        case 4:\n          clonedResponse = response.clone(); // Create a fresh `ResponseInit` object by cloning the headers.\n          responseInit = {\n            headers: new Headers(clonedResponse.headers),\n            status: clonedResponse.status,\n            statusText: clonedResponse.statusText\n          }; // Apply any user modifications.\n          modifiedResponseInit = modifier ? modifier(responseInit) : responseInit; // Create the new response from the body stream and `ResponseInit`\n          // modifications. Note: not all browsers support the Response.body stream,\n          // so fall back to reading the entire body into memory as a blob.\n          if (!canConstructResponseFromBodyStream()) {\n            _context.next = 11;\n            break;\n          }\n          _context.t0 = clonedResponse.body;\n          _context.next = 14;\n          break;\n        case 11:\n          _context.next = 13;\n          return clonedResponse.blob();\n        case 13:\n          _context.t0 = _context.sent;\n        case 14:\n          body = _context.t0;\n          return _context.abrupt(\"return\", new Response(body, modifiedResponseInit));\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _copyResponse.apply(this, arguments);\n}\nexport { copyResponse };","map":{"version":3,"names":["canConstructResponseFromBodyStream","WorkboxError","copyResponse","response","modifier","origin","url","responseURL","URL","self","location","clonedResponse","clone","responseInit","headers","Headers","status","statusText","modifiedResponseInit","body","blob","Response"],"sources":["D:/github/music-pwa-frontend/node_modules/workbox-core/copyResponse.js"],"sourcesContent":["/*\r\n  Copyright 2019 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\r\nimport { WorkboxError } from './_private/WorkboxError.js';\r\nimport './_version.js';\r\n/**\r\n * Allows developers to copy a response and modify its `headers`, `status`,\r\n * or `statusText` values (the values settable via a\r\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\r\n * object in the constructor).\r\n * To modify these values, pass a function as the second argument. That\r\n * function will be invoked with a single object with the response properties\r\n * `{headers, status, statusText}`. The return value of this function will\r\n * be used as the `ResponseInit` for the new `Response`. To change the values\r\n * either modify the passed parameter(s) and return it, or return a totally\r\n * new object.\r\n *\r\n * This method is intentionally limited to same-origin responses, regardless of\r\n * whether CORS was used or not.\r\n *\r\n * @param {Response} response\r\n * @param {Function} modifier\r\n * @memberof workbox-core\r\n */\r\nasync function copyResponse(response, modifier) {\r\n    let origin = null;\r\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\r\n    if (response.url) {\r\n        const responseURL = new URL(response.url);\r\n        origin = responseURL.origin;\r\n    }\r\n    if (origin !== self.location.origin) {\r\n        throw new WorkboxError('cross-origin-copy-response', { origin });\r\n    }\r\n    const clonedResponse = response.clone();\r\n    // Create a fresh `ResponseInit` object by cloning the headers.\r\n    const responseInit = {\r\n        headers: new Headers(clonedResponse.headers),\r\n        status: clonedResponse.status,\r\n        statusText: clonedResponse.statusText,\r\n    };\r\n    // Apply any user modifications.\r\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\r\n    // Create the new response from the body stream and `ResponseInit`\r\n    // modifications. Note: not all browsers support the Response.body stream,\r\n    // so fall back to reading the entire body into memory as a blob.\r\n    const body = canConstructResponseFromBodyStream()\r\n        ? clonedResponse.body\r\n        : await clonedResponse.blob();\r\n    return new Response(body, modifiedResponseInit);\r\n}\r\nexport { copyResponse };\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,kCAAkC,QAAQ,kDAAkD;AACrG,SAASC,YAAY,QAAQ,4BAA4B;AACzD,OAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA,SAmBeC,YAAY;EAAA;AAAA;AAAA;EAAA,2EAA3B,iBAA4BC,QAAQ,EAAEC,QAAQ;IAAA;IAAA;MAAA;QAAA;UACtCC,MAAM,GAAG,IAAI,EACjB;UACA,IAAIF,QAAQ,CAACG,GAAG,EAAE;YACRC,WAAW,GAAG,IAAIC,GAAG,CAACL,QAAQ,CAACG,GAAG,CAAC;YACzCD,MAAM,GAAGE,WAAW,CAACF,MAAM;UAC/B;UAAC,MACGA,MAAM,KAAKI,IAAI,CAACC,QAAQ,CAACL,MAAM;YAAA;YAAA;UAAA;UAAA,MACzB,IAAIJ,YAAY,CAAC,4BAA4B,EAAE;YAAEI,MAAM,EAANA;UAAO,CAAC,CAAC;QAAA;UAE9DM,cAAc,GAAGR,QAAQ,CAACS,KAAK,EAAE,EACvC;UACMC,YAAY,GAAG;YACjBC,OAAO,EAAE,IAAIC,OAAO,CAACJ,cAAc,CAACG,OAAO,CAAC;YAC5CE,MAAM,EAAEL,cAAc,CAACK,MAAM;YAC7BC,UAAU,EAAEN,cAAc,CAACM;UAC/B,CAAC,EACD;UACMC,oBAAoB,GAAGd,QAAQ,GAAGA,QAAQ,CAACS,YAAY,CAAC,GAAGA,YAAY,EAC7E;UACA;UACA;UAAA,KACab,kCAAkC,EAAE;YAAA;YAAA;UAAA;UAAA,cAC3CW,cAAc,CAACQ,IAAI;UAAA;UAAA;QAAA;UAAA;UAAA,OACbR,cAAc,CAACS,IAAI,EAAE;QAAA;UAAA;QAAA;UAF3BD,IAAI;UAAA,iCAGH,IAAIE,QAAQ,CAACF,IAAI,EAAED,oBAAoB,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA,CAClD;EAAA;AAAA;AACD,SAAShB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}