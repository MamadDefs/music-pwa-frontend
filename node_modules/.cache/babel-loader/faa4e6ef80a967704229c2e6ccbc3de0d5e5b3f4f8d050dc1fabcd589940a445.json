{"ast":null,"code":"import _slicedToArray from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/github/music-pwa-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\n/**\r\n * A {@link workbox-strategies.Strategy} implementation\r\n * specifically designed to work with\r\n * {@link workbox-precaching.PrecacheController}\r\n * to both cache and fetch precached assets.\r\n *\r\n * Note: an instance of this class is created automatically when creating a\r\n * `PrecacheController`; it's generally not necessary to create this yourself.\r\n *\r\n * @extends workbox-strategies.Strategy\r\n * @memberof workbox-precaching\r\n */\nvar PrecacheStrategy = /*#__PURE__*/function (_Strategy) {\n  _inherits(PrecacheStrategy, _Strategy);\n  var _super = _createSuper(PrecacheStrategy);\n  /**\r\n   *\r\n   * @param {Object} [options]\r\n   * @param {string} [options.cacheName] Cache name to store and retrieve\r\n   * requests. Defaults to the cache names provided by\r\n   * {@link workbox-core.cacheNames}.\r\n   * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\r\n   * to use in conjunction with this caching strategy.\r\n   * @param {Object} [options.fetchOptions] Values passed along to the\r\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\r\n   * of all fetch() requests made by this strategy.\r\n   * @param {Object} [options.matchOptions] The\r\n   * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\r\n   * for any `cache.match()` or `cache.put()` calls made by this strategy.\r\n   * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\r\n   * get the response from the network if there's a precache miss.\r\n   */\n  function PrecacheStrategy() {\n    var _this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, PrecacheStrategy);\n    options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n    _this = _super.call(this, options);\n    _this._fallbackToNetwork = options.fallbackToNetwork === false ? false : true;\n    // Redirected responses cannot be used to satisfy a navigation request, so\n    // any redirected response must be \"copied\" rather than cloned, so the new\n    // response doesn't contain the `redirected` flag. See:\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n    _this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\n    return _this;\n  }\n  /**\r\n   * @private\r\n   * @param {Request|string} request A request to run this strategy for.\r\n   * @param {workbox-strategies.StrategyHandler} handler The event that\r\n   *     triggered the request.\r\n   * @return {Promise<Response>}\r\n   */\n  _createClass(PrecacheStrategy, [{\n    key: \"_handle\",\n    value: function () {\n      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(request, handler) {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return handler.cacheMatch(request);\n            case 2:\n              response = _context.sent;\n              if (!response) {\n                _context.next = 5;\n                break;\n              }\n              return _context.abrupt(\"return\", response);\n            case 5:\n              if (!(handler.event && handler.event.type === 'install')) {\n                _context.next = 9;\n                break;\n              }\n              _context.next = 8;\n              return this._handleInstall(request, handler);\n            case 8:\n              return _context.abrupt(\"return\", _context.sent);\n            case 9:\n              _context.next = 11;\n              return this._handleFetch(request, handler);\n            case 11:\n              return _context.abrupt(\"return\", _context.sent);\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function _handle(_x, _x2) {\n        return _handle2.apply(this, arguments);\n      }\n      return _handle;\n    }()\n  }, {\n    key: \"_handleFetch\",\n    value: function () {\n      var _handleFetch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(request, handler) {\n        var response, params, integrityInManifest, integrityInRequest, noIntegrityConflict, wasCached, cacheKey;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              params = handler.params || {}; // Fall back to the network if we're configured to do so.\n              if (!this._fallbackToNetwork) {\n                _context2.next = 17;\n                break;\n              }\n              if (process.env.NODE_ENV !== 'production') {\n                logger.warn(\"The precached response for \" + \"\".concat(getFriendlyURL(request.url), \" in \").concat(this.cacheName, \" was not \") + \"found. Falling back to the network.\");\n              }\n              integrityInManifest = params.integrity;\n              integrityInRequest = request.integrity;\n              noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest; // Do not add integrity if the original request is no-cors\n              // See https://github.com/GoogleChrome/workbox/issues/3096\n              _context2.next = 8;\n              return handler.fetch(new Request(request, {\n                integrity: request.mode !== 'no-cors' ? integrityInRequest || integrityInManifest : undefined\n              }));\n            case 8:\n              response = _context2.sent;\n              if (!(integrityInManifest && noIntegrityConflict && request.mode !== 'no-cors')) {\n                _context2.next = 15;\n                break;\n              }\n              this._useDefaultCacheabilityPluginIfNeeded();\n              _context2.next = 13;\n              return handler.cachePut(request, response.clone());\n            case 13:\n              wasCached = _context2.sent;\n              if (process.env.NODE_ENV !== 'production') {\n                if (wasCached) {\n                  logger.log(\"A response for \".concat(getFriendlyURL(request.url), \" \") + \"was used to \\\"repair\\\" the precache.\");\n                }\n              }\n            case 15:\n              _context2.next = 18;\n              break;\n            case 17:\n              throw new WorkboxError('missing-precache-entry', {\n                cacheName: this.cacheName,\n                url: request.url\n              });\n            case 18:\n              if (!(process.env.NODE_ENV !== 'production')) {\n                _context2.next = 34;\n                break;\n              }\n              _context2.t0 = params.cacheKey;\n              if (_context2.t0) {\n                _context2.next = 24;\n                break;\n              }\n              _context2.next = 23;\n              return handler.getCacheKey(request, 'read');\n            case 23:\n              _context2.t0 = _context2.sent;\n            case 24:\n              cacheKey = _context2.t0;\n              // Workbox is going to handle the route.\n              // print the routing details to the console.\n              logger.groupCollapsed(\"Precaching is responding to: \" + getFriendlyURL(request.url));\n              logger.log(\"Serving the precached url: \".concat(getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)));\n              logger.groupCollapsed(\"View request details here.\");\n              logger.log(request);\n              logger.groupEnd();\n              logger.groupCollapsed(\"View response details here.\");\n              logger.log(response);\n              logger.groupEnd();\n              logger.groupEnd();\n            case 34:\n              return _context2.abrupt(\"return\", response);\n            case 35:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _handleFetch(_x3, _x4) {\n        return _handleFetch2.apply(this, arguments);\n      }\n      return _handleFetch;\n    }()\n  }, {\n    key: \"_handleInstall\",\n    value: function () {\n      var _handleInstall2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(request, handler) {\n        var response, wasCached;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              this._useDefaultCacheabilityPluginIfNeeded();\n              _context3.next = 3;\n              return handler.fetch(request);\n            case 3:\n              response = _context3.sent;\n              _context3.next = 6;\n              return handler.cachePut(request, response.clone());\n            case 6:\n              wasCached = _context3.sent;\n              if (wasCached) {\n                _context3.next = 9;\n                break;\n              }\n              throw new WorkboxError('bad-precaching-response', {\n                url: request.url,\n                status: response.status\n              });\n            case 9:\n              return _context3.abrupt(\"return\", response);\n            case 10:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function _handleInstall(_x5, _x6) {\n        return _handleInstall2.apply(this, arguments);\n      }\n      return _handleInstall;\n    }()\n    /**\r\n     * This method is complex, as there a number of things to account for:\r\n     *\r\n     * The `plugins` array can be set at construction, and/or it might be added to\r\n     * to at any time before the strategy is used.\r\n     *\r\n     * At the time the strategy is used (i.e. during an `install` event), there\r\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\r\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\r\n     *\r\n     * - If this method is called and there are no suitable `cacheWillUpdate`\r\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\r\n     *\r\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\r\n     * we don't have to do anything (this might be a previously added\r\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\r\n     *\r\n     * - If this method is called and there is more than one `cacheWillUpdate`,\r\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\r\n     * we need to remove it. (This situation is unlikely, but it could happen if\r\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\r\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\r\n     *\r\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\r\n     *\r\n     * @private\r\n     */\n  }, {\n    key: \"_useDefaultCacheabilityPluginIfNeeded\",\n    value: function _useDefaultCacheabilityPluginIfNeeded() {\n      var defaultPluginIndex = null;\n      var cacheWillUpdatePluginCount = 0;\n      var _iterator = _createForOfIteratorHelper(this.plugins.entries()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            index = _step$value[0],\n            plugin = _step$value[1];\n          // Ignore the copy redirected plugin when determining what to do.\n          if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\n            continue;\n          }\n          // Save the default plugin's index, in case it needs to be removed.\n          if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\n            defaultPluginIndex = index;\n          }\n          if (plugin.cacheWillUpdate) {\n            cacheWillUpdatePluginCount++;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (cacheWillUpdatePluginCount === 0) {\n        this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\n      } else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\n        // Only remove the default plugin; multiple custom plugins are allowed.\n        this.plugins.splice(defaultPluginIndex, 1);\n      }\n      // Nothing needs to be done if cacheWillUpdatePluginCount is 1\n    }\n  }]);\n  return PrecacheStrategy;\n}(Strategy);\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\n  cacheWillUpdate: function cacheWillUpdate(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      var response;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            response = _ref.response;\n            if (!(!response || response.status >= 400)) {\n              _context4.next = 3;\n              break;\n            }\n            return _context4.abrupt(\"return\", null);\n          case 3:\n            return _context4.abrupt(\"return\", response);\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }))();\n  }\n};\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\n  cacheWillUpdate: function cacheWillUpdate(_ref2) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n      var response;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            response = _ref2.response;\n            if (!response.redirected) {\n              _context5.next = 7;\n              break;\n            }\n            _context5.next = 4;\n            return copyResponse(response);\n          case 4:\n            _context5.t0 = _context5.sent;\n            _context5.next = 8;\n            break;\n          case 7:\n            _context5.t0 = response;\n          case 8:\n            return _context5.abrupt(\"return\", _context5.t0);\n          case 9:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }))();\n  }\n};\nexport { PrecacheStrategy };","map":{"version":3,"names":["copyResponse","cacheNames","getFriendlyURL","logger","WorkboxError","Strategy","PrecacheStrategy","options","cacheName","getPrecacheName","_fallbackToNetwork","fallbackToNetwork","plugins","push","copyRedirectedCacheableResponsesPlugin","request","handler","cacheMatch","response","event","type","_handleInstall","_handleFetch","params","process","env","NODE_ENV","warn","url","integrityInManifest","integrity","integrityInRequest","noIntegrityConflict","fetch","Request","mode","undefined","_useDefaultCacheabilityPluginIfNeeded","cachePut","clone","wasCached","log","cacheKey","getCacheKey","groupCollapsed","groupEnd","status","defaultPluginIndex","cacheWillUpdatePluginCount","entries","index","plugin","defaultPrecacheCacheabilityPlugin","cacheWillUpdate","splice","redirected"],"sources":["D:/github/music-pwa-frontend/node_modules/workbox-precaching/PrecacheStrategy.js"],"sourcesContent":["/*\r\n  Copyright 2020 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { copyResponse } from 'workbox-core/copyResponse.js';\r\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { Strategy } from 'workbox-strategies/Strategy.js';\r\nimport './_version.js';\r\n/**\r\n * A {@link workbox-strategies.Strategy} implementation\r\n * specifically designed to work with\r\n * {@link workbox-precaching.PrecacheController}\r\n * to both cache and fetch precached assets.\r\n *\r\n * Note: an instance of this class is created automatically when creating a\r\n * `PrecacheController`; it's generally not necessary to create this yourself.\r\n *\r\n * @extends workbox-strategies.Strategy\r\n * @memberof workbox-precaching\r\n */\r\nclass PrecacheStrategy extends Strategy {\r\n    /**\r\n     *\r\n     * @param {Object} [options]\r\n     * @param {string} [options.cacheName] Cache name to store and retrieve\r\n     * requests. Defaults to the cache names provided by\r\n     * {@link workbox-core.cacheNames}.\r\n     * @param {Array<Object>} [options.plugins] {@link https://developers.google.com/web/tools/workbox/guides/using-plugins|Plugins}\r\n     * to use in conjunction with this caching strategy.\r\n     * @param {Object} [options.fetchOptions] Values passed along to the\r\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters|init}\r\n     * of all fetch() requests made by this strategy.\r\n     * @param {Object} [options.matchOptions] The\r\n     * {@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions|CacheQueryOptions}\r\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\r\n     * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\r\n     * get the response from the network if there's a precache miss.\r\n     */\r\n    constructor(options = {}) {\r\n        options.cacheName = cacheNames.getPrecacheName(options.cacheName);\r\n        super(options);\r\n        this._fallbackToNetwork =\r\n            options.fallbackToNetwork === false ? false : true;\r\n        // Redirected responses cannot be used to satisfy a navigation request, so\r\n        // any redirected response must be \"copied\" rather than cloned, so the new\r\n        // response doesn't contain the `redirected` flag. See:\r\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\r\n        this.plugins.push(PrecacheStrategy.copyRedirectedCacheableResponsesPlugin);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {Request|string} request A request to run this strategy for.\r\n     * @param {workbox-strategies.StrategyHandler} handler The event that\r\n     *     triggered the request.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async _handle(request, handler) {\r\n        const response = await handler.cacheMatch(request);\r\n        if (response) {\r\n            return response;\r\n        }\r\n        // If this is an `install` event for an entry that isn't already cached,\r\n        // then populate the cache.\r\n        if (handler.event && handler.event.type === 'install') {\r\n            return await this._handleInstall(request, handler);\r\n        }\r\n        // Getting here means something went wrong. An entry that should have been\r\n        // precached wasn't found in the cache.\r\n        return await this._handleFetch(request, handler);\r\n    }\r\n    async _handleFetch(request, handler) {\r\n        let response;\r\n        const params = (handler.params || {});\r\n        // Fall back to the network if we're configured to do so.\r\n        if (this._fallbackToNetwork) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                logger.warn(`The precached response for ` +\r\n                    `${getFriendlyURL(request.url)} in ${this.cacheName} was not ` +\r\n                    `found. Falling back to the network.`);\r\n            }\r\n            const integrityInManifest = params.integrity;\r\n            const integrityInRequest = request.integrity;\r\n            const noIntegrityConflict = !integrityInRequest || integrityInRequest === integrityInManifest;\r\n            // Do not add integrity if the original request is no-cors\r\n            // See https://github.com/GoogleChrome/workbox/issues/3096\r\n            response = await handler.fetch(new Request(request, {\r\n                integrity: request.mode !== 'no-cors'\r\n                    ? integrityInRequest || integrityInManifest\r\n                    : undefined,\r\n            }));\r\n            // It's only \"safe\" to repair the cache if we're using SRI to guarantee\r\n            // that the response matches the precache manifest's expectations,\r\n            // and there's either a) no integrity property in the incoming request\r\n            // or b) there is an integrity, and it matches the precache manifest.\r\n            // See https://github.com/GoogleChrome/workbox/issues/2858\r\n            // Also if the original request users no-cors we don't use integrity.\r\n            // See https://github.com/GoogleChrome/workbox/issues/3096\r\n            if (integrityInManifest &&\r\n                noIntegrityConflict &&\r\n                request.mode !== 'no-cors') {\r\n                this._useDefaultCacheabilityPluginIfNeeded();\r\n                const wasCached = await handler.cachePut(request, response.clone());\r\n                if (process.env.NODE_ENV !== 'production') {\r\n                    if (wasCached) {\r\n                        logger.log(`A response for ${getFriendlyURL(request.url)} ` +\r\n                            `was used to \"repair\" the precache.`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // This shouldn't normally happen, but there are edge cases:\r\n            // https://github.com/GoogleChrome/workbox/issues/1441\r\n            throw new WorkboxError('missing-precache-entry', {\r\n                cacheName: this.cacheName,\r\n                url: request.url,\r\n            });\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            const cacheKey = params.cacheKey || (await handler.getCacheKey(request, 'read'));\r\n            // Workbox is going to handle the route.\r\n            // print the routing details to the console.\r\n            logger.groupCollapsed(`Precaching is responding to: ` + getFriendlyURL(request.url));\r\n            logger.log(`Serving the precached url: ${getFriendlyURL(cacheKey instanceof Request ? cacheKey.url : cacheKey)}`);\r\n            logger.groupCollapsed(`View request details here.`);\r\n            logger.log(request);\r\n            logger.groupEnd();\r\n            logger.groupCollapsed(`View response details here.`);\r\n            logger.log(response);\r\n            logger.groupEnd();\r\n            logger.groupEnd();\r\n        }\r\n        return response;\r\n    }\r\n    async _handleInstall(request, handler) {\r\n        this._useDefaultCacheabilityPluginIfNeeded();\r\n        const response = await handler.fetch(request);\r\n        // Make sure we defer cachePut() until after we know the response\r\n        // should be cached; see https://github.com/GoogleChrome/workbox/issues/2737\r\n        const wasCached = await handler.cachePut(request, response.clone());\r\n        if (!wasCached) {\r\n            // Throwing here will lead to the `install` handler failing, which\r\n            // we want to do if *any* of the responses aren't safe to cache.\r\n            throw new WorkboxError('bad-precaching-response', {\r\n                url: request.url,\r\n                status: response.status,\r\n            });\r\n        }\r\n        return response;\r\n    }\r\n    /**\r\n     * This method is complex, as there a number of things to account for:\r\n     *\r\n     * The `plugins` array can be set at construction, and/or it might be added to\r\n     * to at any time before the strategy is used.\r\n     *\r\n     * At the time the strategy is used (i.e. during an `install` event), there\r\n     * needs to be at least one plugin that implements `cacheWillUpdate` in the\r\n     * array, other than `copyRedirectedCacheableResponsesPlugin`.\r\n     *\r\n     * - If this method is called and there are no suitable `cacheWillUpdate`\r\n     * plugins, we need to add `defaultPrecacheCacheabilityPlugin`.\r\n     *\r\n     * - If this method is called and there is exactly one `cacheWillUpdate`, then\r\n     * we don't have to do anything (this might be a previously added\r\n     * `defaultPrecacheCacheabilityPlugin`, or it might be a custom plugin).\r\n     *\r\n     * - If this method is called and there is more than one `cacheWillUpdate`,\r\n     * then we need to check if one is `defaultPrecacheCacheabilityPlugin`. If so,\r\n     * we need to remove it. (This situation is unlikely, but it could happen if\r\n     * the strategy is used multiple times, the first without a `cacheWillUpdate`,\r\n     * and then later on after manually adding a custom `cacheWillUpdate`.)\r\n     *\r\n     * See https://github.com/GoogleChrome/workbox/issues/2737 for more context.\r\n     *\r\n     * @private\r\n     */\r\n    _useDefaultCacheabilityPluginIfNeeded() {\r\n        let defaultPluginIndex = null;\r\n        let cacheWillUpdatePluginCount = 0;\r\n        for (const [index, plugin] of this.plugins.entries()) {\r\n            // Ignore the copy redirected plugin when determining what to do.\r\n            if (plugin === PrecacheStrategy.copyRedirectedCacheableResponsesPlugin) {\r\n                continue;\r\n            }\r\n            // Save the default plugin's index, in case it needs to be removed.\r\n            if (plugin === PrecacheStrategy.defaultPrecacheCacheabilityPlugin) {\r\n                defaultPluginIndex = index;\r\n            }\r\n            if (plugin.cacheWillUpdate) {\r\n                cacheWillUpdatePluginCount++;\r\n            }\r\n        }\r\n        if (cacheWillUpdatePluginCount === 0) {\r\n            this.plugins.push(PrecacheStrategy.defaultPrecacheCacheabilityPlugin);\r\n        }\r\n        else if (cacheWillUpdatePluginCount > 1 && defaultPluginIndex !== null) {\r\n            // Only remove the default plugin; multiple custom plugins are allowed.\r\n            this.plugins.splice(defaultPluginIndex, 1);\r\n        }\r\n        // Nothing needs to be done if cacheWillUpdatePluginCount is 1\r\n    }\r\n}\r\nPrecacheStrategy.defaultPrecacheCacheabilityPlugin = {\r\n    async cacheWillUpdate({ response }) {\r\n        if (!response || response.status >= 400) {\r\n            return null;\r\n        }\r\n        return response;\r\n    },\r\n};\r\nPrecacheStrategy.copyRedirectedCacheableResponsesPlugin = {\r\n    async cacheWillUpdate({ response }) {\r\n        return response.redirected ? await copyResponse(response) : response;\r\n    },\r\n};\r\nexport { PrecacheStrategy };\r\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,UAAU,QAAQ,qCAAqC;AAChE,SAASC,cAAc,QAAQ,yCAAyC;AACxE,SAASC,MAAM,QAAQ,iCAAiC;AACxD,SAASC,YAAY,QAAQ,uCAAuC;AACpE,SAASC,QAAQ,QAAQ,gCAAgC;AACzD,OAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA,IAYMC,gBAAgB;EAAA;EAAA;EAClB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,4BAA0B;IAAA;IAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;IAAA;IACpBA,OAAO,CAACC,SAAS,GAAGP,UAAU,CAACQ,eAAe,CAACF,OAAO,CAACC,SAAS,CAAC;IACjE,0BAAMD,OAAO;IACb,MAAKG,kBAAkB,GACnBH,OAAO,CAACI,iBAAiB,KAAK,KAAK,GAAG,KAAK,GAAG,IAAI;IACtD;IACA;IACA;IACA;IACA,MAAKC,OAAO,CAACC,IAAI,CAACP,gBAAgB,CAACQ,sCAAsC,CAAC;IAAC;EAC/E;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EANI;IAAA;IAAA;MAAA,0EAOA,iBAAcC,OAAO,EAAEC,OAAO;QAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACHA,OAAO,CAACC,UAAU,CAACF,OAAO,CAAC;YAAA;cAA5CG,QAAQ;cAAA,KACVA,QAAQ;gBAAA;gBAAA;cAAA;cAAA,iCACDA,QAAQ;YAAA;cAAA,MAIfF,OAAO,CAACG,KAAK,IAAIH,OAAO,CAACG,KAAK,CAACC,IAAI,KAAK,SAAS;gBAAA;gBAAA;cAAA;cAAA;cAAA,OACpC,IAAI,CAACC,cAAc,CAACN,OAAO,EAAEC,OAAO,CAAC;YAAA;cAAA;YAAA;cAAA;cAAA,OAIzC,IAAI,CAACM,YAAY,CAACP,OAAO,EAAEC,OAAO,CAAC;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CACnD;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,+EACD,kBAAmBD,OAAO,EAAEC,OAAO;QAAA;QAAA;UAAA;YAAA;cAEzBO,MAAM,GAAIP,OAAO,CAACO,MAAM,IAAI,CAAC,CAAC,EACpC;cAAA,KACI,IAAI,CAACb,kBAAkB;gBAAA;gBAAA;cAAA;cACvB,IAAIc,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;gBACvCvB,MAAM,CAACwB,IAAI,CAAC,0CACLzB,cAAc,CAACa,OAAO,CAACa,GAAG,CAAC,iBAAO,IAAI,CAACpB,SAAS,cAAW,wCACzB,CAAC;cAC9C;cACMqB,mBAAmB,GAAGN,MAAM,CAACO,SAAS;cACtCC,kBAAkB,GAAGhB,OAAO,CAACe,SAAS;cACtCE,mBAAmB,GAAG,CAACD,kBAAkB,IAAIA,kBAAkB,KAAKF,mBAAmB,EAC7F;cACA;cAAA;cAAA,OACiBb,OAAO,CAACiB,KAAK,CAAC,IAAIC,OAAO,CAACnB,OAAO,EAAE;gBAChDe,SAAS,EAAEf,OAAO,CAACoB,IAAI,KAAK,SAAS,GAC/BJ,kBAAkB,IAAIF,mBAAmB,GACzCO;cACV,CAAC,CAAC,CAAC;YAAA;cAJHlB,QAAQ;cAAA,MAYJW,mBAAmB,IACnBG,mBAAmB,IACnBjB,OAAO,CAACoB,IAAI,KAAK,SAAS;gBAAA;gBAAA;cAAA;cAC1B,IAAI,CAACE,qCAAqC,EAAE;cAAC;cAAA,OACrBrB,OAAO,CAACsB,QAAQ,CAACvB,OAAO,EAAEG,QAAQ,CAACqB,KAAK,EAAE,CAAC;YAAA;cAA7DC,SAAS;cACf,IAAIhB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;gBACvC,IAAIc,SAAS,EAAE;kBACXrC,MAAM,CAACsC,GAAG,CAAC,yBAAkBvC,cAAc,CAACa,OAAO,CAACa,GAAG,CAAC,+CAChB,CAAC;gBAC7C;cACJ;YAAC;cAAA;cAAA;YAAA;cAAA,MAMC,IAAIxB,YAAY,CAAC,wBAAwB,EAAE;gBAC7CI,SAAS,EAAE,IAAI,CAACA,SAAS;gBACzBoB,GAAG,EAAEb,OAAO,CAACa;cACjB,CAAC,CAAC;YAAA;cAAA,MAEFJ,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY;gBAAA;gBAAA;cAAA;cAAA,eACpBH,MAAM,CAACmB,QAAQ;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA,OAAW1B,OAAO,CAAC2B,WAAW,CAAC5B,OAAO,EAAE,MAAM,CAAC;YAAA;cAAA;YAAA;cAAzE2B,QAAQ;cACd;cACA;cACAvC,MAAM,CAACyC,cAAc,CAAC,kCAAkC1C,cAAc,CAACa,OAAO,CAACa,GAAG,CAAC,CAAC;cACpFzB,MAAM,CAACsC,GAAG,sCAA+BvC,cAAc,CAACwC,QAAQ,YAAYR,OAAO,GAAGQ,QAAQ,CAACd,GAAG,GAAGc,QAAQ,CAAC,EAAG;cACjHvC,MAAM,CAACyC,cAAc,8BAA8B;cACnDzC,MAAM,CAACsC,GAAG,CAAC1B,OAAO,CAAC;cACnBZ,MAAM,CAAC0C,QAAQ,EAAE;cACjB1C,MAAM,CAACyC,cAAc,+BAA+B;cACpDzC,MAAM,CAACsC,GAAG,CAACvB,QAAQ,CAAC;cACpBf,MAAM,CAAC0C,QAAQ,EAAE;cACjB1C,MAAM,CAAC0C,QAAQ,EAAE;YAAC;cAAA,kCAEf3B,QAAQ;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CAClB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,iFACD,kBAAqBH,OAAO,EAAEC,OAAO;QAAA;QAAA;UAAA;YAAA;cACjC,IAAI,CAACqB,qCAAqC,EAAE;cAAC;cAAA,OACtBrB,OAAO,CAACiB,KAAK,CAAClB,OAAO,CAAC;YAAA;cAAvCG,QAAQ;cAAA;cAAA,OAGUF,OAAO,CAACsB,QAAQ,CAACvB,OAAO,EAAEG,QAAQ,CAACqB,KAAK,EAAE,CAAC;YAAA;cAA7DC,SAAS;cAAA,IACVA,SAAS;gBAAA;gBAAA;cAAA;cAAA,MAGJ,IAAIpC,YAAY,CAAC,yBAAyB,EAAE;gBAC9CwB,GAAG,EAAEb,OAAO,CAACa,GAAG;gBAChBkB,MAAM,EAAE5B,QAAQ,CAAC4B;cACrB,CAAC,CAAC;YAAA;cAAA,kCAEC5B,QAAQ;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA,CAClB;MAAA;QAAA;MAAA;MAAA;IAAA;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EA1BI;IAAA;IAAA,OA2BA,iDAAwC;MACpC,IAAI6B,kBAAkB,GAAG,IAAI;MAC7B,IAAIC,0BAA0B,GAAG,CAAC;MAAC,2CACL,IAAI,CAACpC,OAAO,CAACqC,OAAO,EAAE;QAAA;MAAA;QAApD,oDAAsD;UAAA;YAA1CC,KAAK;YAAEC,MAAM;UACrB;UACA,IAAIA,MAAM,KAAK7C,gBAAgB,CAACQ,sCAAsC,EAAE;YACpE;UACJ;UACA;UACA,IAAIqC,MAAM,KAAK7C,gBAAgB,CAAC8C,iCAAiC,EAAE;YAC/DL,kBAAkB,GAAGG,KAAK;UAC9B;UACA,IAAIC,MAAM,CAACE,eAAe,EAAE;YACxBL,0BAA0B,EAAE;UAChC;QACJ;MAAC;QAAA;MAAA;QAAA;MAAA;MACD,IAAIA,0BAA0B,KAAK,CAAC,EAAE;QAClC,IAAI,CAACpC,OAAO,CAACC,IAAI,CAACP,gBAAgB,CAAC8C,iCAAiC,CAAC;MACzE,CAAC,MACI,IAAIJ,0BAA0B,GAAG,CAAC,IAAID,kBAAkB,KAAK,IAAI,EAAE;QACpE;QACA,IAAI,CAACnC,OAAO,CAAC0C,MAAM,CAACP,kBAAkB,EAAE,CAAC,CAAC;MAC9C;MACA;IACJ;EAAC;EAAA;AAAA,EArL0B1C,QAAQ;AAuLvCC,gBAAgB,CAAC8C,iCAAiC,GAAG;EAC3CC,eAAe,iCAAe;IAAA;MAAA;MAAA;QAAA;UAAA;YAAZnC,QAAQ,QAARA,QAAQ;YAAA,MACxB,CAACA,QAAQ,IAAIA,QAAQ,CAAC4B,MAAM,IAAI,GAAG;cAAA;cAAA;YAAA;YAAA,kCAC5B,IAAI;UAAA;YAAA,kCAER5B,QAAQ;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EACnB;AACJ,CAAC;AACDZ,gBAAgB,CAACQ,sCAAsC,GAAG;EAChDuC,eAAe,kCAAe;IAAA;MAAA;MAAA;QAAA;UAAA;YAAZnC,QAAQ,SAARA,QAAQ;YAAA,KACrBA,QAAQ,CAACqC,UAAU;cAAA;cAAA;YAAA;YAAA;YAAA,OAASvD,YAAY,CAACkB,QAAQ,CAAC;UAAA;YAAA;YAAA;YAAA;UAAA;YAAA,eAAGA,QAAQ;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EACxE;AACJ,CAAC;AACD,SAASZ,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}